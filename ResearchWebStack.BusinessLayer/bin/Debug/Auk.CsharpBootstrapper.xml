<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Auk.CsharpBootstrapper</name>
    </assembly>
    <members>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ActionAnalyzer.DoesActionThrowException(System.Action)">
            <summary>
                Returns true if action throw exception.
            </summary>
            <param name="action"></param>
            <returns>
                Returns true if exception has been thrown.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ActionAnalyzer.InvokeActionBySuppressingException(System.Action)">
            <summary>
                Invoke action without throwing the exception if occurred
            </summary>
            <param name="action"></param>
            <returns>
                Invoke action without throwing the exception if occurred
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ActionAnalyzer.DoesActionThrowException``1(System.Action{``0},``0)">
            <summary>
                Returns true if action throw exception
            </summary>
            <param name="action"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ActionAnalyzer.GetActionException(System.Action)">
            <summary>
                Catch exception from action execution.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ActionAnalyzer.GetActionException``1(System.Action{``0},``0)">
            <summary>
                Catch exception from action execution.
            </summary>
            <param name="action"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateWithActivatorOnly(AutoFixture.IFixture,System.Type,System.Exception@,System.Boolean,System.Object[])">
            <summary>
                This should be called when Fixture is failed to create the object.
            </summary>
            <param name="fixture"></param>
            <param name="type"></param>
            <param name="exception"></param>
            <param name="createUsingConstructorIfFailed">
                If this is true, then it will create constructors parameters dynamically. And try to create the object from the
                constructor.
            </param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateType(AutoFixture.IFixture,System.Type,System.Exception@,System.Object[])">
            <summary>
                It is mostly useful for creating parameter or string or simple type of objects.
                However, it also has the intelligence to go underline data-type if it failed to create at first.
                If creating a parameter requires another type's parameter instantiation it will go there and create and then try
                to create the object itself.
            </summary>
            <param name="fixture"></param>
            <param name="type"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateTypeUsingFixtureOrConstuctor``1(AutoFixture.IFixture,System.Exception@,System.Object[])">
            <summary>
                It is mostly useful for creating parameter or string or simple type of objects.
                However, it also has the intelligence to go underline data-type if it failed to create at first.
                If creating a parameter requires another type's parameter instantiation it will go there and create and then try
                to create the object itself.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fixture"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateUsingMinimumParameterCountAnDynamicParameters(AutoFixture.IFixture,System.Type,System.Exception@)">
            <summary>
                Capture all parameters with minimum parameter count.
                If min parameter count is 2 , then it search for parameters with count == 2 then
                try to invoke with Dynamic Parameters
            </summary>
            <param name="fixture"></param>
            <param name="type"></param>
            <param name="exception"></param>
            <returns>Returns T if created successfully with any constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateUsingMinimumParameterCountAnDynamicParameters(AutoFixture.IFixture,System.Reflection.ConstructorInfo[],System.Type,System.Exception@)">
            <summary>
                Capture all parameters with minimum parameter count.
                If min parameter count is 2 , then it search for parameters with count == 2 then
                try to invoke with Dynamic Parameters
            </summary>
            <param name="fixture"></param>
            <param name="constructorInfos"></param>
            <param name="type"></param>
            <param name="exception"></param>
            <returns>Returns T if created successfully with any constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateUsingCustomConstructorModel(AutoFixture.IFixture,Auk.CsharpBootstrapper.Model.CustomConstructorModel,System.Type,System.Exception@)">
            <summary>
                Capture all parameters with minimum parameter count.
                If min parameter count is 2 , then it search for parameters with count == 2 then
                try to invoke with Dynamic Parameters
            </summary>
            <param name="fixture"></param>
            <param name="customConstructorModel">Min parameter <see cref="T:Auk.CsharpBootstrapper.Model.CustomConstructorModel" /></param>
            <param name="type"></param>
            <param name="exception"></param>
            <returns>Returns T if created successfully with any constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.ReturnStaticSingletonInstance``1(AutoFixture.IFixture)">
            <summary>
                Return static singleton instance if found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.ReturnStaticSingletonInstanceObject(System.Type,AutoFixture.IFixture)">
            <summary>
                Return static singleton instance if found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateWithFixtureFirst``1(AutoFixture.IFixture,System.Exception@,System.Object[])">
            <summary>
                Create object first using fixture depending and then other paths to explore.
                If failed then try to find if object is singleton using Instance variable name static type then return that.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fixture"></param>
            <param name="exception"></param>
            <param name="parameters">
                Parameters related to the type. If multiple constructor present then it will try to match
                with he one provided
            </param>
            <returns>
                Return type of(T) after creating or from dictionary or from singleton object using instance property.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateAbstractOrInterfaceUsingMoq``1(AutoFixture.IFixture)">
            <summary>
                Creates abstract or interface using mock.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fixture"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateAbstractUsingMoqUsingParameters``1(System.Object[])">
            <summary>
                Creates abstract or interface using mock.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateAbstractOrInterfaceUsingMoqWithType(System.Type,AutoFixture.IFixture)">
            <summary>
                Creates abstract or interface using mock.
            </summary>
            <param name="type"></param>
            <param name="fixture"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateAbstractUsingMoqWithTypeUsingParameters(System.Type,System.Object[])">
            <summary>
                Creates abstract or interface using mock.
            </summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.Create``1(AutoFixture.IFixture,System.Exception@,System.Boolean,System.Object[])">
            <summary>
                Create object first using activator or fixture depending on the parameter.
                If failed then try to find if object is singleton using Instance variable name static type then return that.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fixture"></param>
            <param name="exception"></param>
            <param name="useFixtureAtFirst"></param>
            <param name="parameters">
                Parameters related to the type. If multiple constructor present then it will try to match
                with he one provided
            </param>
            <returns>
                Return type of(T) after creating or from dictionary or from singleton object using instance property.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateWithoutExceptionRevealed``1(AutoFixture.IFixture,System.Boolean,System.Object[])">
            <summary>
                Create object first using activator or fixture depending on the parameter.
                If failed then try to find if object is singleton using Instance variable name static type then return that.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fixture"></param>
            <param name="useFixtureAtFirst"></param>
            <param name="parameters">
                Parameters related to the type. If multiple constructor present then it will try to match
                with he one provided
            </param>
            <returns>
                Return type of(T) after creating or from dictionary or from singleton object using instance property.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateAbstractClass``1(System.Type[],AutoFixture.IFixture,System.Boolean,System.Object[])">
            <summary>
                Create abstract class using list of types, first using activator or fixture depending on the parameter.
                If failed then try to find if object is singleton using Instance variable name static type then return that.
            </summary>
            <param name="typesInstanciated">
                For abstract class it needs a list of types which is actually instantiated from this abstract class.
            </param>
            <param name="fixture"></param>
            <param name="useFixtureAtFirst"></param>
            <param name="parameters">
                Parameters related to the type. If multiple constructor present then it will try to match
                with he one provided
            </param>
            <returns>
                Return type of(T) after creating or from dictionary or from singleton object using instance property.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.CreateAnalyzer.CreateAbstractClass``1(System.Type,AutoFixture.IFixture,System.Boolean,System.Object[])">
            <summary>
                Create abstract class using list of types, first using activator or fixture depending on the parameter.
                If failed then try to find if object is singleton using Instance variable name static type then return that.
            </summary>
            <param name="typesInstanciated">
                For abstract class it needs a list of types which is actually instantiated from this abstract class.
            </param>
            <param name="fixture"></param>
            <param name="useFixtureAtFirst"></param>
            <param name="parameters">
                Parameters related to the type. If multiple constructor present then it will try to match
                with he one provided
            </param>
            <returns>
                Return type of(T) after creating or from dictionary or from singleton object using instance property.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetMethodInfoFromType(System.Type,System.String,System.Int32)">
            <summary>
                Get method info by name.
            </summary>
            <param name="instanceType"></param>
            <param name="name">Name of the method</param>
            <param name="defaultIndex">
                Which index of method to return in-case found more.
                In case method is out of boundary it sends the first one.
            </param>
            <returns>Returns method info of </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetDefaultConstructorUsingParametersDataType(System.Type,System.Object[])">
            <summary>
                Return a constructor if parameters types are matched properly.
            </summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetPropertyInfoRegardlessOfBindingFlag(System.Type,System.String)">
            <summary>
                Get Property Info
            </summary>
            <param name="typeOfInstance"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetPropertiesWithoutIndexedOnes(System.Type,System.Reflection.BindingFlags)">
            <summary>
                <see cref="!:http://bit.ly/309lphx" />
                Helps to reduce issues with indexed properties.
            </summary>
            <param name="typeOfInstance"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetAllPropertiesWithoutIndexedOnes(System.Type,System.Boolean)">
            <summary>
                <see cref="!:http://bit.ly/309lphx" />
                Helps to reduce issues with indexed properties.
            </summary>
            <param name="typeOfInstance"></param>
            <param name="includeInheritedMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetAllPropertiesDictionaryWithoutIndexedOnes(System.Type,System.Boolean)">
            <summary>
                <see cref="!:http://bit.ly/309lphx" />
                Helps to reduce issues with indexed properties.
            </summary>
            <param name="typeOfInstance"></param>
            <param name="includeInheritedMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetLocalVariablesDictionary(System.Reflection.MethodInfo)">
            <summary>
                Get Local Variable Info
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetSubclasses(System.Type)">
            <summary>
                Get subclasses of a parent class.
            </summary>
            <param name="parentClassType"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetAllMethodsAsDictionary(System.Type,System.Boolean)">
            <summary>
                Returns a dictionary where key is the method-name and list contains methods
            </summary>
            <param name="typeOfInstance"></param>
            <param name="includeInheritedMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetMethodInfo(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>
                Get MethodInfo by suppressing exception.
            </summary>
            <param name="methodName"></param>
            <param name="parameterTypes"></param>
            <param name="currentInstanceType"></param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetGenericMethodInfo(System.Type,System.Type[],System.String,System.Type[])">
            <summary>
            </summary>
            <param name="genericTypeParameters">Types for the generic argument</param>
            <param name="methodName"></param>
            <param name="parameterTypes"></param>
            <param name="currentInstanceType"></param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetGenericMethodInfo(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            </summary>
            <param name="methodInfo"></param>
            <param name="genericTypeParameters">Types for the generic argument</param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetGenericMethodInfoWithSingleType(System.Type,System.Type,System.String,System.Type[])">
            <summary>
                Convert regular method info to generic method signature.
            </summary>
            <param name="currentInstanceType"></param>
            <param name="genericTypeParameter">Types for the generic argument</param>
            <param name="methodName"></param>
            <param name="parametersTypes"></param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.ReflectionAnalyzer.GetGenericMethodInfoWithSingleType(System.Reflection.MethodInfo,System.Type,System.String,System.Type[])">
            <summary>
                Convert regular method info to generic method signature.
            </summary>
            <param name="methodInfo"></param>
            <param name="genericTypeParameter">Types for the generic argument</param>
            <param name="methodName"></param>
            <param name="parametersTypes"></param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.SequenceAnalyzer.GetSequencedItems``1(``0[],System.Int32,System.Int32)">
            <summary>
                If type is not null and the sequence has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="list"></param>
            <param name="startingSequence">Zero based index</param>
            <param name="endingSequence">Zero based index</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.SequenceAnalyzer.GetPagedSequencedItems``1(``0[],System.Int32,System.Int32)">
            <summary>
                If type is not null and the page number has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="list"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Analyzer.SequenceAnalyzer.GetPagedSequencedItems``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
                If type is not null and the page number has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="list"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.BaseClassSetupV3(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.Type)">
            <summary>
                Setting up <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" /> based on given type.
            </summary>
            <param name="baseSetupV3Test"></param>
            <param name="type"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.SetupGenericArguments(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test)">
            <summary>
                Setting up <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" /> based on given type.
            </summary>
            <param name="baseSetupV3Test"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.ConstructorModelsPopulate(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,System.Type)">
            <summary>
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" /> Populating <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.CustomConstructorModels" />
            </summary>
            <param name="baseSetupV3Test"></param>
            <param name="type"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.CreateDynamicEnum(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.String,System.String)">
            <summary>
                Create dynamic enum parameter with given value.
            </summary>
            <param name="baseSetupV3Test"></param>
            <param name="fullyQuantifiedName"></param>
            <param name="expectedValue">Given expected value should be created if cannot create then throw exception.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.CreateLiteralType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.String,System.String)">
            <summary>
                Create literal type with <see cref="!:expectedValue" />
                It can create any primitive type + any enum, however, cannot be class or array or any other complex type.
                It cannot create List with expected value or array.
            </summary>
            <param name="baseUnitTestSetup"></param>
            <param name="fullyQuantifiedName"></param>
            <param name="expectedValue">Given expected value should be created if cannot create then throw exception.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.CreateNonPublicType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.String)">
            <summary>
                Create non-public type by given string fullyQuantifiedName.
            </summary>
            <returns>Returns a type of object created</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupTestExtension.TrackStrings(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.String[])">
            <summary>
                Create non-public type by given string fullyQuantifiedName.
            </summary>
            <returns>Returns a type of object created</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExceptionVerifyExtension.VerifyExceptionType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,System.String,System.Object,System.Type)">
            <summary>
                This method will assert and verify given assert exception type given in the parameter &lt;param
                name="assertExceptionType"&gt;&lt;/param&gt;.
            </summary>
            <param name="baseSetupV1"></param>
            <param name="methodInfo"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="assertExceptionType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExceptionVerifyExtension.VerifyArgumentNullExceptionType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,System.String,System.Object)">
            <summary>
                This method will assert and verify given assert type of(ArgumentNullException) thrown.
            </summary>
            <param name="baseSetupV1"></param>
            <param name="methodInfo"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExceptionVerifyExtension.VerifyArgumentExceptionType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,System.String)">
            <summary>
                This method will assert and verify given assert type of(ArgumentNullException) thrown.
            </summary>
            <param name="baseSetupV1"></param>
            <param name="methodInfo"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExploreExtension.ExploreEveryMethodsExceptforUsedOnes(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                This method is going to explore all methods except
                for the ignored ones and the ones already found by generator.
            </summary>
            <param name="baseSetupV3"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExploreExtension.ExploreEveryPropertiesExceptforUsedOnes(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test)">
            <summary>
                This method is going to explore all properties
                except for the ignored ones and the ones already found by generator.
            </summary>
            <param name="baseSetupV1"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExploreExtension.ExploreEveryFieldsExceptforUsedOnes(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test)">
            <summary>
                This method is going to explore all fields
                except for the ignored ones and the ones already found by generator.
            </summary>
            <param name="baseSetupV1"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExploreExtension.ExploreVerifyConstructor(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Int32)">
            <summary>
                This method is going to explore and verify indexed constructor.
            </summary>
            <param name="baseSetupV1Test"></param>
            <param name="constructorIndex"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExploreExtension.ExploreVerifyConstructorByGivenParametersType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Type[])">
            <summary>
                This method is going to explore and verify constructor by dynamic parameters.
            </summary>
            <param name="parametersTypes"></param>
            <param name="baseSetupV1Test"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExploreExtension.ExploreVerifyConstructors(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test)">
            <summary>
                This method is going to explore and verify constructors.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.BaseClassSetup(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.Type)">
            <summary>
                Setting up <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup" /> based on given type.
            </summary>
            <param name="baseSetupV1Test"></param>
            <param name="type"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.ValidateExecuteCondition(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.String)">
            <summary>
                Validates current test execute condition. Based on the setup in
                <para />
                <seealso cref="!:IBaseUnitTestSetup.ConfigureIgnoringTests" /> condition,
                <para />
                test will be ignored.
            </summary>
            <param name="baseSetupV1Test"></param>
            <param name="classMemberName">Class member which is going to be validated before any execution.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.CreateUsingType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.Type,System.Object[])">
            <summary>
                Create given type.
            </summary>
            <returns>Returns a newly created.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.Create``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.Boolean,System.Object[])">
            <summary>
                Create <see cref="!:T2" /> class.
                First Try with CreateType, CreateUsingFixtureSuppressedException, CreateInstance
            </summary>
            <returns>Returns a newly created <see cref="!:T2" />.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.CreateType``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup)">
            <summary>
                Create parameter or simple data-type using AutoFixture or Activator.
            </summary>
            <typeparam name="T2">Create Given type.</typeparam>
            <returns>Returns a type of T</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.CreateType``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,System.Boolean,System.Object[])">
            <summary>
                Create parameter or simple data-type using AutoFixture or Activator.
            </summary>
            <typeparam name="T2">Create Given type.</typeparam>
            <returns>Returns a type of T</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.CreateUsingFixture``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup)">
            <summary>
                Create <see cref="!:T2" /> class.
            </summary>
            <returns>Returns a newly created <see cref="!:T2" />.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupExtension.CreateUsingActivator``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup)">
            <summary>
                Create <see cref="!:T2" /> class.
            </summary>
            <returns>Returns a newly created <see cref="!:T2" />.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupVerifyExtension.PropertyTypeVerify(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.PropertyInfo,System.Type)">
            <summary>
                Assert property type.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupCreateExtension">
            <summary>
                Extension methods for base setup <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupCreateExtension.CreateWithMocksForMethod``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,System.String,System.Type[])">
            <summary>
                Creates an instance of <typeparamref name="T" /> mock implementation where all the methods except for the one
                matching
                <paramref name="methodName" /> and <paramref name="parameterTypes" /> are replaced with mock implementations.
            </summary>
            <typeparam name="T">Type of the instance to create.</typeparam>
            <param name="baseSetupV3Test">Current <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" /> instance.</param>
            <param name="methodName">The name of the method being tested.</param>
            <param name="parameterTypes">List of parameter types to match with method overload.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupCreateExtension.CreateOrMoqOrStub``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,``0)">
            <summary>
                Create a new object of type T2 using <see cref="N:AutoFixture" /> if <see cref="!:possibility" /> is null.
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="baseSetupV1Test"></param>
            <param name="possibility">If possibility is null then it will create a new one.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupCreateExtension.CreateOrMoqOrStub``1(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup,``0,System.Boolean,Moq.IMock{``0}@)">
            <summary>
                Creates a new moq object if <see cref="!:isUseMoqFirst" /> is set to true or else create using
                <see cref="N:AutoFixture" />.
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="baseSetupV1Test"></param>
            <param name="possibility">If possibility contains default(<see cref="!:T2" />) then it will create a new one.</param>
            <param name="isUseMoqFirst">If null then use moq to create the object first or else <see cref="N:AutoFixture" />.</param>
            <param name="mock"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupAdditionalExploreExtension.GetResultOfConstructorExecuteByIndex(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,System.Int32)">
            <summary>
                This method is going to explore and verify indexed constructor.
            </summary>
            <param name="baseSetupV3Test"></param>
            <param name="constructorIndex"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupAdditionalExploreExtension.ExploreVerifyEveryConstructorsWithoutException(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test)">
            <summary>
                This method is going to explore and verify constructors.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupAdditionalExtension.GetMethodInfoWrapper(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.String,System.Int32)">
            <summary>
                Get method info of the type
            </summary>
            <param name="baseSetupV1Test"></param>
            <param name="name">Name of the method</param>
            <param name="index"></param>
            Which index of method to return in-case found more.
            In case method is out of boundary it sends the first one.
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupAdditionalExtension.SetupGenericArguments(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test)">
            <summary>
                Setting up <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" /> based on given type.
            </summary>
            <param name="baseSetupV3Test"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.BaseSetup.BaseSetupAdditionalExtension.ConstructorModelsPopulate(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,System.Type)">
            <summary>
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test" /> Populating <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.CustomConstructorModels" />
            </summary>
            <param name="baseSetupV3Test"></param>
            <param name="type"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.CommonValidateResultExtension.IsPresentAndValid``1(Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult{``0})">
            <summary>
                Checks if NOT null and IsValid then returns true.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commonValidateResult"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ConstructorInfoExtension.IsEveryConstructorPrivate(System.Reflection.ConstructorInfo[])">
            <summary>
                !constructorInfos.Any(n => n.IsPublic)
            </summary>
            <param name="constructorInfos"></param>
            <returns>Returns false if any constructors is public or no constructors present</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DateTimeExtension.GetTwelveHourFormatString(System.DateTime)">
            <summary>
                <see cref="F:Auk.CsharpBootstrapper.StaticTypes.DateTimeFormatType.CommonDateTimeTwelveHourFormat" />
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DateTimeExtension.GetCompiledStartMessage(System.DateTime,System.String[])">
            <summary>
                <see cref="F:Auk.CsharpBootstrapper.StaticTypes.DateTimeFormatType.CommonDateTimeTwelveHourFormat" /><see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.StartInfoText" />
                Messages
            </summary>
            <param name="dateTime"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DateTimeExtension.GetCompiledEndMessage(System.DateTime,System.String[])">
            <summary>
                <see cref="F:Auk.CsharpBootstrapper.StaticTypes.DateTimeFormatType.CommonDateTimeTwelveHourFormat" /><see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EndInfoText" />Messages
            </summary>
            <param name="dateTime"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DateTimeExtension.GetCompiledDurationEndMessage(System.DateTime,System.DateTime,System.String[])">
            <summary>
                <see cref="F:Auk.CsharpBootstrapper.StaticTypes.DateTimeFormatType.CommonDateTimeTwelveHourFormat" /><see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EndInfoText" />Messages
                [Duration : {time} {minutes}]
            </summary>
            <param name="endDateTime"></param>
            <param name="startTime"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.DictionaryExtension">
            <summary>
                Dictionary related extensions
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.HasItem``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns true if list has any items.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.CreateFittedDictionary``2(System.Int32)">
            <summary>
                Returns the dictionary which may be good for the aut process.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns>
                Return result only if present or else return null.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Safe get
                Return result only if present or else return null.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns>
                Return result only if present or else return null.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.SafeGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Safe get
                Return result only if present or else return null.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns>
                Return result only if present or else return null.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.GetByTypeAsKey``2(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}})">
            <summary>
                Key is the type.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.Append``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IList{``1}},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IList{``1}},System.Int32)">
            <summary>
                Append the other dictionary with current one.
                If same values are there then list values will be added to the current dictionary as locked.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Append the other dictionary with current one.
                If same values are there then will be replaced with the value of <see cref="!:otherDictionary" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.GetBy``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.String)">
            <summary>
                Key is the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodes"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.GetDictionaryOfElementsTypeAsKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Create a new dictionary with type as key and List<typeparamref name="T" />
                Returns a dictionary where Key would be type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements"></param>
            <param name="where"></param>
            <returns>Returns a dictionary where Key would be type.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.GetDictionaryByPropertyValueAsKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Create a new dictionary with type as key and List<typeparamref name="T" />
                Returns a dictionary where Key would be type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements"></param>
            <param name="where"></param>
            <returns>Returns a dictionary where Key would be type.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.SafeDelete``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Deletes key safely after checking contains
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.Add``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.String,``0,System.Int32)">
            <summary>
                Create key list if not present.
                And then add to the dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.Collect``1(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            </summary>
            <param name="dictionary"></param>
            <param name="elements"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.CreateTypeNonExist``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Create List or any type in dictionary if not present already.
                Returns true if dictionary doesn't contain and created that type.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TListType">List type is preferable but it can create any type.</typeparam>
            <param name="dictionary"></param>
            <param name="key">
                Passing key will be check against the dictionary if not present given TListType will be created with
                this key.
            </param>
            <returns>Returns true if dictionary doesn't contain and created that type.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.CreateTypeNonExistIList``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IList{``1}},``0,System.Int32)">
            <summary>
                Create List or any type in dictionary if not present already.
                Returns true if dictionary doesn't contain and created that type.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TListType">List type is preferable but it can create any type.</typeparam>
            <param name="dictionary"></param>
            <param name="key">
                Passing key will be check against the dictionary if not present given TListType will be created with
                this key.
            </param>
            <param name="defaultCapacity"></param>
            <returns>Returns true if dictionary doesn't contain and created that type.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.AddItemToDictionary``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IList{``1}},``0,``1,System.Int32)">
            <summary>
                Add the item to the dictionary , where values are kept as list.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
            <param name="defaultCapacity"></param>
            <param name="dictionary"></param>
            <returns>Returns true if dictionary doesn't contain and created that type.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.AddItemToDictionaryWithLock``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IList{``1}},``0,``1,System.Int32)">
            <summary>
                Add the item to the dictionary , where values are kept as list.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
            <param name="defaultCapacity"></param>
            <param name="dictionary"></param>
            <returns>Returns true if dictionary doesn't contain and created that type.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.PopulateDictionaryWithMethodWrapper(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Auk.CsharpBootstrapper.Interfaces.Model.IMethodInfoWrapperModel}},System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
                Populate dictionary with method wrapper.
            </summary>
            <param name="dictionary"></param>
            <param name="methodInfos"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.GetAsCast``2(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{``0}},System.String)">
            <summary>
                Key is type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.GetValuesBy``1(System.Collections.Generic.IDictionary{System.String,``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns list of values which are matching to filter
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="filter">Filter function</param>
            <returns>List of matching value</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.IsNullOrEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns true if dictionary is null or no keys present.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DictionaryExtension.NewConcurrentDictionary``2(System.Int32,System.Int32)">
            <summary>
                Create concurrent dictionary
            </summary>
            <param name="maxDegree">Default 4</param>
            <param name="defaultCapacity">
                Optional default dictionary capacity, default value is 10.
            </param>
            <typeparam name="TKey">
                Dictionary Key type
            </typeparam>
            <typeparam name="TValue">
                Dictionary Value type
            </typeparam>
            <returns>
                The <see cref="T:System.Collections.Generic.IDictionary`2" />. created dictionary instance
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DoubleExtension.ToFixedTwoDigit(System.Double)">
            <summary>
                "#.##"
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.DoubleExtension.ToFixedFourDigit(System.Double)">
            <summary>
                "#.####"
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.ExceptionExtension">
            <summary>
            Exception extensions
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.Log(System.Exception,System.String,System.String,System.String,System.Int32)">
            <summary>
                Log Error message using <see cref="T:Auk.CsharpBootstrapper.Helper.LogHelper" />
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="message2"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.LogAndThrow(System.Exception,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Log Error message using <see cref="T:Auk.CsharpBootstrapper.Helper.LogHelper" /> and throw <see cref="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.ThrowIf(System.Exception,System.Boolean,System.Boolean)" />
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="message2"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.LogAndMustThrow(System.Exception,System.String,System.String,System.String,System.Int32)">
            <summary>
                Log Error message using <see cref="T:Auk.CsharpBootstrapper.Helper.LogHelper" /> and throw <see cref="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.ThrowIf(System.Exception,System.Boolean,System.Boolean)" />
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="message2"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.PathErrorLogAndThrow(System.Exception,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Log Error message using <see cref="T:Auk.CsharpBootstrapper.Helper.LogHelper" /> and throw <see cref="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.ThrowIf(System.Exception,System.Boolean,System.Boolean)" />
            </summary>
            <param name="exception"></param>
            <param name="path"></param>
            <param name="message"></param>
            <param name="message2"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.LogAndThrow(System.Exception,System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Log Error message using <see cref="T:Auk.CsharpBootstrapper.Helper.LogHelper" /> and throw <see cref="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.ThrowIf(System.Exception,System.Boolean,System.Boolean)" />
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="isThrowInnerException"></param>
            <param name="isThrow"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.LogAndThrow(System.Exception,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Log Error message using <see cref="T:Auk.CsharpBootstrapper.Helper.LogHelper" /> and throw <see cref="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.ThrowIf(System.Exception,System.Boolean,System.Boolean)" />
            </summary>
            <param name="exception"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExceptionExtension.ThrowIf(System.Exception,System.Boolean,System.Boolean)">
            <summary>
                Throw exception if parameters are okay.
            </summary>
            <param name="exception"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExploreExtension.ExploreMethod(System.Object,AutoFixture.IFixture,System.Reflection.MethodInfo,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Explore a single MethodInfo by passing MethodInfo and instance.
            </summary>
            <param name="instance">It will be null on static method.</param>
            <param name="fixture"></param>
            <param name="methodInfo"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.ToString(System.Collections.Generic.IEnumerable{System.String},System.String,System.String[])">
            <summary>
                Returns null if no items present.
            </summary>
            <param name="listOfString"></param>
            <param name="joiner"></param>
            <param name="stringsCollections"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.ToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Returns null if no items present.
            </summary>
            <param name="listOfString"></param>
            <param name="joiner"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.ToStringWithParametersJoiner(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns null if no items present.
            </summary>
            <param name="listOfString"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.ToStringWithNewLineJoiner``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Joins elements to string using string.Join with <see cref="P:System.Environment.NewLine" /> as separator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listOfString"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.FindRightIndexOf(System.String,System.String,System.Int32)">
            <summary>
                Find the right side index of what is finding from the current start index.
            </summary>
            <param name="sourceString"></param>
            <param name="whatToFind"></param>
            <param name="startPosition">Assuming this is higher than 0</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.FindLeftIndexOf(System.String,System.String,System.Int32)">
            <summary>
                Find the left Index of the item from start position in the middle.
            </summary>
            <param name="sourceString">For example "[He3 [He2 [He1] ]"</param>
            <param name="whatToFind">"["</param>
            <param name="startPosition">Assuming this is higher than 0, 6 will return the middle index of the thrid bracket.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ExtendedStringManipulationExtension.TrimToSimpleAssemblyName(System.String)">
            <summary>
                Trim the version and public key identifiers from an assembly name
            </summary>
            <param name="fullyQualifiedAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldInfoExtension.IsConstant(System.Reflection.FieldInfo)">
            <summary>
                Returns true if IsLiteral.
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldInfoExtension.IsReadOnlyField(System.Reflection.FieldInfo)">
            <summary>
                returns true if IsInitOnly
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldInfoExtension.IsConstOrReadOnly(System.Reflection.FieldInfo)">
            <summary>
                returns true if IsInitOnly or IsLiteral
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldInfoExtension.IsBackingField(System.Reflection.FieldInfo)">
            <summary>
                returns true if backing field , meaning has angel brackets.
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldInfoExtension.GetValueAs``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
                returns converted value of the field. If not possible then returns default of T
            </summary>
            <param name="fieldInfo"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldValueVerifyExtension.AnyFieldValueWithBindingFlagsVerify(System.Object,System.Type,System.String,System.Object,System.Type,System.Reflection.BindingFlags)">
            <summary>
                This verify field value with type.
            </summary>
            <param name="classInstance"></param>
            <param name="classInstanceType"></param>
            <param name="fieldName"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
            <param name="bindingFlags"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.FieldValueVerifyExtension.FieldValueWithTypeVerify(System.Object,System.Reflection.FieldInfo,System.Object,System.Type)">
            <summary>
                This verify field value with type.
            </summary>
            <param name="classInstance"></param>
            <param name="fieldInfo"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension">
            <summary>
                Extension for <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetBackingFields(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent)">
            <summary>
                Get Property Index
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.SetValue``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,``0,System.String,System.Object,Auk.CsharpBootstrapper.StaticTypes.ClassMemberType)">
            <summary>
                Set value to a internal, private, protected or public field or property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="currentInstance"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="classMemberType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetValue``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String,Auk.CsharpBootstrapper.StaticTypes.ClassMemberType)">
            <summary>
                Get value to a internal, private, protected or public field or property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="classMemberType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetPropertyValueUsingBackingField``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String)">
            <summary>
                Get property value of a internal, private, protected or public field or property using a backing field.
                Assuming that there is no Getter method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.SetPropertyValueUsingBackingField``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String,``0)">
            <summary>
                Set property value of a internal, private, protected or public field or property using a backing field.
                Assuming that there is no Setter method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="valueToSet"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.SetPropertyValueUsingBackingField``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,``0)">
            <summary>
                Set property value of a internal, private, protected or public field or property using a backing field.
                Assuming that there is no Setter method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <param name="valueToSet"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetFieldValueAs``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String)">
            <summary>
                Get value to a internal, private, protected or public field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetFieldValueAs``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String)">
            <summary>
                Get value to a internal, private, protected or public field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetPropertyValueAs``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String)">
            <summary>
                Get value to a internal, private, protected or public Property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetPropertyValueAs``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String)">
            <summary>
                Get value to a internal, private, protected or public Property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.FieldSet(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object)">
            <summary>
                Set value to a internal, private, protected or public field.
            </summary>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.FieldSetWithTypeValidation(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String,System.Object)">
            <summary>
                Set value to a internal, private, protected or public field.
            </summary>
            <param name="instanceComponent"></param>
            <param name="currentInstance"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.FieldSetWithTypeValidation(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object)">
            <summary>
                Set value to a internal, private, protected or public field.
            </summary>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.FieldSet(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String,System.Object)">
            <summary>
                Set value to a internal, private, protected or public field.
            </summary>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.PropertySet(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object)">
            <summary>
                Set value to a internal, private, protected or public property.
            </summary>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.PropertySet(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Object,System.String,System.Object)">
            <summary>
                Set value to a internal, private, protected or public property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instanceComponent"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Type[],System.Exception@)">
            <summary>
                Get method info of <see cref="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstanceType" />
                <para />
                using types array encapsulate exception thrown.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Type[])">
            <summary>
                Get method info of <see cref="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstanceType" />
                <para />
                using types array encapsulate exception thrown.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Int32)">
            <summary>
                Get method info of the type given in the constructor.
            </summary>
            <param name="instanceComponent"></param>
            <param name="name">Name of the method</param>
            <param name="defaultIndex">
                Which index of method to return in-case found more.
                In case method is out of boundary it sends the first one.
            </param>
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetResultWrapper``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Int32,System.Object[],System.Object)">
            <summary>
                Get method info of the type given in the constructor.
            </summary>
            <param name="instanceComponent"></param>
            <param name="name">Name of the method</param>
            <param name="defaultIndex">
                Which index of method to return in-case found more.
                In case method is out of boundary it sends the first one.
            </param>
            <param name="parameters"></param>
            <param name="instanceClass"></param>
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetResultWrapper``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[],System.Object)">
            <summary>
                Get method info of the type given in the constructor.
            </summary>
            <param name="instanceComponent"></param>
            <param name="name">Name of the method</param>
            <param name="parameters"></param>
            <param name="parameterTypes">Find MethodInfo by parameter type</param>
            <param name="instanceClass"></param>
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel)">
            <summary>
                Get method info by full-filling constraints of given <see cref="T:Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel" />
                Verifies constraints by using <see cref="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsMatching(System.Reflection.ParameterInfo[],Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel)" />
            </summary>
            <param name="instanceComponent"></param>
            <param name="name">Name of the method</param>
            <param name="parameterConstraintModel"></param>
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Collections.Generic.IList{Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel})">
            <summary>
                Get method info by full-filling constraints of given <see cref="T:Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel" />
                Verifies constraints by using <see cref="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsMatching(System.Reflection.ParameterInfo[],Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel)" />
            </summary>
            <param name="instanceComponent"></param>
            <param name="name">Name of the method</param>
            <param name="parameterConstraintModels"></param>
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel[])">
            <summary>
                Get Method info from <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
            <param name="instanceComponent"></param>
            <param name="name"></param>
            <param name="parameterConstraintModels"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodInfoWrappers(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String)">
            <summary>
                Get method info of the type
            </summary>
            <param name="instanceComponent"></param>
            <param name="name">Name of the method</param>
            Which index of method to return in-case found more.
            In case method is out of boundary it sends the first one.
            <returns>Returns method info of given type in the constructor.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetPropertyInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String)">
            <summary>
                Get property info of even if property is public/nonpublic/static/non-static.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetFieldInfo(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String)">
            <summary>
                Get property info of encapsulate exception thrown.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.ErrorMessageOnNullOrConstraintsFail(System.String,Auk.CsharpBootstrapper.Interfaces.Model.IMethodInfoWrapperModel,System.Collections.Generic.IList{Auk.CsharpBootstrapper.Interfaces.Model.IMethodInfoWrapperModel},Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel[])">
            <summary>
                Display nice error message for test fixing.
            </summary>
            <param name="methodName"></param>
            <param name="methodInfoWrapperModel"></param>
            <param name="listOfMethodInfoWrapperModels"></param>
            <param name="parameterConstraintModels"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.ExploreMethodDynamically(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Reflection.MethodInfo,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Explore method with or without instance dynamically.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodInfo"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.InvokeMethodDynamically(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Reflection.MethodInfo,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Explore method with or without instance dynamically.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodInfo"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.InvokeMethodDynamicallyWithType(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Type[],Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Explore method with or without instance dynamically.
            </summary>
            <param name="instanceComponent"></param>
            <param name="types"></param>
            <param name="methodExploreType"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetResultOfMethodInfoAsObject(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Reflection.MethodInfo)">
            <summary>
                If got into exception then returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetResultOfMethod``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[])">
            <summary>
                If got into exception then returns null.
                Suppress exception, sends instance as null for static instance.
            </summary>
            <typeparam name="TReturnData"></typeparam>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.InvokeWithTypes(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[])">
            <summary>
                If got into exception then returns null.
                Suppress exception, sends instance as null for static instance.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetResult``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
                Invoke current method info with given parameters.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodInfo"></param>
            <param name="parameters"></param>
            <param name="instanceOfClass"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetResultOfMethod``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[],System.Object)">
            <summary>
                Invoke current method info with given parameters.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="parameterTypes"></param>
            <param name="instanceOfClass"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.ExecuteMethod(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[],System.Object)">
            <summary>
                Invoke current method info with given parameters.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="parameterTypes"></param>
            <param name="instanceOfClass"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.Execute(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[])">
            <summary>
                Invoke current method info with given parameters.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.GetMethodException``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[],System.Object)">
            <summary>
                Invoke current method info with given parameters.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="parameterTypes"></param>
            <param name="instanceOfClass"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.Get``1(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object)">
            <summary>
                Get Result of Property or Field or Backing Field
                First Search for Property then Field and then finally Backing Field with the property name given in
                <see cref="!:propertyOrFieldOrBackingField" />
            </summary>
            <param name="instanceComponent"></param>
            <param name="propertyOrFieldOrBackingField"></param>
            <param name="instance"></param>
            <returns>Returns default if not found.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.Set(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object,System.Object)">
            <summary>
                Set Result of Property or Field or Backing Field
                First Search for Property then Field and then finally Backing Field with the property name given in
                <see cref="!:propertyOrFieldOrBackingField" />
            </summary>
            <param name="instanceComponent"></param>
            <param name="propertyOrFieldOrBackingField"></param>
            <param name="value"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.InstanceComponentExtension.InvokeWithParameters(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
                Invoke current method info with given parameters.
                If errors are thrown then shallow.
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodInfo"></param>
            <param name="parameters"></param>
            <param name="instanceOfClass"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension">
            <summary>
                Method Info related extensions
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.TryToGetResultMethodInfo``2(System.Reflection.MethodInfo,``0,``1@,System.Exception@,System.Object[])">
            <summary>
                Returns true if method invoke
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnData"></typeparam>
            <param name="method"></param>
            <param name="instance"></param>
            <param name="returnData"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.TryToGetResultOfStaticMethodInfo``1(System.Reflection.MethodInfo,System.Object,``0@,System.Exception@,System.Object[])">
            <summary>
                Returns true if method invoke
            </summary>
            <typeparam name="TReturnData"></typeparam>
            <param name="method"></param>
            <param name="classInstance"></param>
            <param name="returnData"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.GetResultMethodInfo``2(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
                Execute if return type is not void.
                If got into exception then returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnData"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.GetResultOfStaticMethodInfo``1(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
                Execute if return type is not void.
                If got into exception then returns null.
            </summary>
            <typeparam name="TReturnData"></typeparam>
            <param name="method"></param>
            <param name="classInstance"></param>
            <param name="parameters"></param>
            <returns>
                Returns null if got into an exception or return type is void.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.GetObjectResultMethodInfo(System.Reflection.MethodInfo,System.Object,System.Exception@,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.GetResultMethodInfo``2(System.Reflection.MethodInfo,``0,System.Exception@,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturnData"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.InvokeMethodInfo``1(System.Reflection.MethodInfo,``0,System.Exception@,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.InvokeStaticMethodInfo(System.Reflection.MethodInfo,System.Exception@,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.InvokeStaticMethodInfo(System.Reflection.MethodInfo,System.Object,System.Exception@,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <param name="method"></param>
            <param name="classInstance"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.DoesInvokeThrow``1(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
                Returns true false based if
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.DoesInvokeThrow``1(System.Reflection.MethodInfo,``0,System.Exception@,System.Object[])">
            <summary>
                Returns true false based if
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.GetThrownException``1(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
                Get method thrown exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.LegacySupport.MethodInfoExtension.CreateParametersUsingActualExcept(System.Reflection.MethodInfo,AutoFixture.IFixture,System.String,System.Object)">
            <summary>
                Returns empty array object if methodInfo null or parameters are empty.
                Inject parameter value <see cref="!:toInjectOnParameterName" /> by matching <see cref="!:parameterNameToSkip" />
                Construct an object array with dynamic parameters except for <see cref="!:parameterNameToSkip" />
            </summary>
            <param name="methodInfo"></param>
            <param name="fixture"></param>
            <param name="parameterNameToSkip"></param>
            <param name="toInjectOnParameterName"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.ListExtension">
            <summary>
                List Extension
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.CreateNewListOrExistingList``1(System.Collections.Generic.IList{``0},System.Boolean,``0[])">
            <summary>
                Create new list or existing list by combining current given <see cref="!:list" /> with the new given items
                <see cref="!:items" />
                Ignore null items if <see cref="!:ignoreItemIfNull" /> is true.
                if items are null or no item then returns the existing list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="ignoreItemIfNull"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.Append``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Combine or append items from appendingList to currentList.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="currentList"></param>
            <param name="appendingList"></param>
            <returns>Returns appendingList.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.AppendWithLock``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Combine or append items from appendingList to currentList.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="currentList"></param>
            <param name="appendingList"></param>
            <returns>Returns appendingList.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.PopulateList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Populate multiple items to the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="items"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.CreateIfNull``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Create if given list is null, then returns a new list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Returns same list or new list depending on the condition.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.AddItemIf``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                Combine or append items from listNeedsTobeAppended to appendingList.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Returns appendingList.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.AddWithLock``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Locks the target list to ensure thread safety when processing async.
            </summary>
            <param name="list">
                The list.
            </param>
            <param name="item">
                The item.
            </param>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.PopulateList``1(System.Collections.Generic.IList{``0},``0[])">
            <summary>
                Populate multiple items to the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="items"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.AddItemIf``1(System.Collections.Generic.IList{``0},``0,System.Boolean)">
            <summary>
                Combine or append items from listNeedsTobeAppended to appendingList.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Returns appendingList.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.AddItemsIf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
                Combine or append items from listNeedsTobeAppended to appendingList.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Returns appendingList.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.AddNonNullItemIf``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                Checks condition and item for null if item is not null item added to the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Returns list</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
                Returns true if list is null or Count == 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.HasItem``1(System.Collections.Generic.IList{``0})">
            <summary>
                Returns true if list has any items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.HasItem``1(``0[])">
            <summary>
                Returns true if list has any items.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.HasItem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns true if list has any items with the given condition in <see cref="T:System.Predicate`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.HasItem``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Returns true if list has any items.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ListExtension.HasItem``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns true if list has any items.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MemberInfoExtension.GetValueWithoutParameters(System.Reflection.MemberInfo,System.Object)">
            <summary>
                Returns value of property , field or method (if no parameters)
            </summary>
            <param name="memberInfo"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetResultMethodInfo``1(System.Reflection.MethodInfo,System.Object,System.Exception@,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <typeparam name="TReturnData"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetPreparedGenericMethodUsing(System.Reflection.MethodInfo,System.Type,System.Collections.Generic.IDictionary{System.String,System.Type[]})">
            <summary>
                Prepare generic arguments to the <see cref="T:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel" />'s
                <see cref="P:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.MethodInfo" /> using
            </summary>
            <param name="methodInfo"></param>
            <param name="defaultSampleArgument">
                if null then <see cref="T:Auk.CsharpBootstrapper.Interfaces.IGenericArgumentSample" /> as default generic parameter.
            </param>
            <param name="dictionaryForGenericArguments">
                If dictionary present, key is used as type.FullName for parameter types, and methodName as Key for methods
                and values used to resolve the. If no dictionary or key found then use
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.IGenericArgumentSample" /> as default generic parameter.
            </param>
            <returns>Returns <see cref="T:System.Reflection.MethodInfo" /> if send back.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetDefaultGenericArguments(System.Reflection.MethodInfo,Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,System.Type)">
            <summary>
                if generic argument parameters count matches with <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.GenericArgumentsCount" /> then
                returns from <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.GenericArgumentTypes" /> or else apply the default type
            </summary>
            <param name="methodInfo"></param>
            <param name="baseSetupV3Test"></param>
            <param name="defaultType"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetPreparedGenericMethodUsing(System.Reflection.MethodInfo,Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test,System.Type,System.Collections.Generic.IDictionary{System.String,System.Type[]})">
            <summary>
                Prepare generic arguments to the <see cref="T:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel" />'s
                <see cref="P:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.MethodInfo" /> using
            </summary>
            <param name="methodInfo"></param>
            <param name="baseSetupV3Test"></param>
            <param name="defaultSampleArgument"></param>
            <param name="dictionaryForGenericArguments">
                If dictionary present, key is used as type.FullName for parameter types, and methodName as Key for methods
                and values used to resolve the. If no dictionary or key found then use
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.IGenericArgumentSample" /> as default generic parameter.
            </param>
            <returns>Returns <see cref="T:System.Reflection.MethodInfo" /> if send back.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetAppliedGenericArgumentsOfMethodInfo(System.Reflection.MethodInfo,System.Type[])">
            <summary>
                Apply Generic method parameters if open to inject (<see cref="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.IsGenericParametersOpenToApply(System.Reflection.MethodInfo)" />.
            </summary>
            <param name="methodInfo"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetAppliedGenericArgumentsWithSameType(System.Reflection.MethodInfo,System.Type)">
            <summary>
                Apply Generic method parameters if open to inject (<see cref="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.IsGenericParametersOpenToApply(System.Reflection.MethodInfo)" /> with single type
                to specific parameters all same
            </summary>
            <param name="methodInfo"></param>
            <param name="type">Provide a single type and that type will be applied to all the generic type parameters</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetResultMethodInfo``1(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
                If got into exception then returns null.
                Suppress exception
            </summary>
            <typeparam name="TReturnData"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetResultOfStaticMethodInfo``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                If got into exception then returns null.
                Suppress exception, sends instance as null for static instance.
            </summary>
            <typeparam name="TReturnData"></typeparam>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetResultOfMethodInfoAsObject(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
                If got into exception then returns null.
            </summary>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetResultOfMethodInfoAsObjectWithParametersCreatedIfHasAny(System.Reflection.MethodInfo,System.Object,AutoFixture.IFixture)">
            <summary>
                Create parameters dynamically if has any and then invoke then method.
            </summary>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="fixture"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.DoesInvokeThrow``1(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
                Returns true false based if
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.DoesInvokeThrow``1(System.Reflection.MethodInfo,``0,System.Exception@,System.Object[])">
            <summary>
                Returns true false based if
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.GetThrownException``1(System.Reflection.MethodInfo,``0,System.Object[])">
            <summary>
                Get method thrown exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.CreateLambdaForGenericMethodCall(System.Reflection.MethodInfo,System.Func{System.Reflection.ParameterInfo,System.Linq.Expressions.Expression})">
            <summary>
                Creates lambda expression of type instance => instance.MyMethod(parameterExpression,...)
                Parameter's expressions are being created by calling <paramref name="parameterSelector" /> for each parameter.
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo" /> object representing the method to call.</param>
            <param name="parameterSelector">
                Delegate to convert <see cref="T:System.Reflection.ParameterInfo" /> to <see cref="T:System.Linq.Expressions.Expression" /> for each
                method's parameter.
            </param>
            <returns>Typed lambda expression representing a call to a given method for an instance passed as a param.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.MakeGenericDelegateType(System.Reflection.MethodInfo)">
            <summary>
                Makes generic delegate type for expression calling the method and returning it's value. Returns
                <see cref="T:System.Action`1" /> or <see cref="T:System.Func`2" /> depending on method's ReturnType.
                T1 represents method's DeclaringType. I.e. for Object.ToString() it returns Func&lt;Object, String&gt;
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo" /> representing the method.</param>
            <returns><see cref="T:System.Action`1" /> if ReturnType is void and <see cref="T:System.Func`2" /> otherwise.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.CreateCallExpression(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Func{System.Reflection.ParameterInfo,System.Linq.Expressions.Expression})">
            <summary>
                Creates the <see cref="T:System.Linq.Expressions.MethodCallExpression" /> representing the method call for a given instance.
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo" /> representing the method.</param>
            <param name="instance"><see cref="T:System.Linq.Expressions.Expression" /> representing the type instance for which the method is called.</param>
            <param name="parameterSelector">
                Delegate to convert <see cref="T:System.Reflection.ParameterInfo" /> to <see cref="T:System.Linq.Expressions.Expression" /> for each
                method's parameter.
            </param>
            <returns><see cref="T:System.Linq.Expressions.MethodCallExpression" /> representing the method call for a given instance.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoExtension.ToDisplayString(System.Reflection.MethodInfo)">
            <summary>
                Creates a display message for given method
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo" /> representing the method.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.MethodInfoParametersExtension.CreateParametersIfHasAny(System.Reflection.MethodInfo,AutoFixture.IFixture,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Create parameters only if needed meaning if current method has parameters.
            </summary>
            <param name="methodInfo"></param>
            <param name="fixture"></param>
            <param name="methodExploreType"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsMatching(System.Reflection.ParameterInfo[],Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel)">
            <summary>
                Returns true if constraint condition is matching. Returns false if parametersInfos is null or empty.
                If indexed parameters is matching:
                <para></para>
                <see cref="P:Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel.ParameterType" /> equals to <see cref="T:System.Reflection.ParameterInfo" />.
                <see cref="P:System.Type.FullName" />
                <para></para>
                <see cref="P:Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel.ParameterName" /> equals to <see cref="P:System.Reflection.ParameterInfo.Name" />
            </summary>
            <param name="parameterInfos"></param>
            <param name="parameterConstraintModel"></param>
            <returns>Returns true if constraint condition is matching.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsMatchingWith(System.Reflection.ParameterInfo[],Auk.CsharpBootstrapper.Interfaces.Model.IParameterConstraintModel[])" -->
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsEqual(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
                Returns true if parameter object array is almost same as the ParameterInfo types.
                Checks parameter length, parameter name and type.
            </summary>
            <param name="parameterInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.ToDisplayString(System.Reflection.ParameterInfo[])">
            <summary>
                Create a display to string message.
            </summary>
            <param name="parameterInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsEqual(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
                Returns true if parameter object array is almost same as the ParameterInfo types.
                Checks parameter length, parameter name and type.
            </summary>
            <param name="parameterInfos"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.IsAcceptableParametersForInvoke(System.Reflection.ParameterInfo[])">
            <summary>
                If parameter type contains in the <see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.MethodParametersIgnore" /> then it will return as
                false.
                Or else true.
            </summary>
            <param name="parameterInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.GetParametersAsCreatedObjects(System.Reflection.ParameterInfo[],AutoFixture.IFixture)">
            <summary>
                Create objects array with Parameter types.
            </summary>
            <param name="parameterInfos"></param>
            <param name="fixture"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.GetParametersAsCreatedObjects(System.Object[],AutoFixture.IFixture)">
            <summary>
                Create objects array with Parameter types.
            </summary>
            <param name="parameters"></param>
            <param name="fixture"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ParameterInfoExtension.CreateParameterTypeObject(System.Reflection.ParameterInfo,AutoFixture.IFixture)">
            <summary>
                Create parameter type object
            </summary>
            <param name="parameterInfo"></param>
            <param name="fixture"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetValueAsString(System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                returns converted value of the property. If not possible then returns default of T
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetValueAsStringToForce(System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                returns converted value of the property. If not possible then returns default of T
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetValueAs``1(System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                returns converted value of the property. If not possible then returns default of T
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="isAddWarningOnConvertFail"></param>
            <param name="isThrow"></param>
            <param name="isThrowInnerException"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetSetValueAs``1(System.Reflection.PropertyInfo,System.Object,``0)">
            <summary>
                returns converted value of the property. If not possible then returns default of T
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="setValue"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.IsReadOnly(System.Reflection.PropertyInfo)" -->
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.IsConstOrReadOnly(System.Reflection.PropertyInfo)">
            <summary>
                returns true if IsReadOnly()
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetSetValue``1(System.Reflection.PropertyInfo,System.Object,``0)">
            <summary>
                Get and Set value to property
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="valueSet"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetSetValue``1(System.Reflection.PropertyInfo,``0)">
            <summary>
                Get and Set value to property
            </summary>
            <param name="propertyInfo"></param>
            <param name="valueSet"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetPropertyValue``1(System.Reflection.PropertyInfo,System.Object,``0)">
            <summary>
                Safe get value of the property, try catch wrapped result.
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyExtension.GetPropertyValue``1(System.Reflection.PropertyInfo)">
            <summary>
                Safe get value of the property (Static Class), try catch wrapped result.
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyValueVerifyExtension.AnyPropertyValueWithBindingFlagsVerify(System.Object,System.Type,System.String,System.Object,System.Type,System.Reflection.BindingFlags)">
            <summary>
                This verify property value with type.
            </summary>
            <param name="classInstance"></param>
            <param name="classInstanceType"></param>
            <param name="propertyName"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
            <param name="bindingFlags"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyValueVerifyExtension.PropertyValueWithTypeVerify(System.Object,System.Reflection.PropertyInfo,System.Object,System.Type)">
            <summary>
                This verify property value with type.
            </summary>
            <param name="classInstance"></param>
            <param name="propertyInfo"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.PropertyValueVerifyExtension.PropertyTypeVerify(System.Object,System.Reflection.PropertyInfo,System.Type)">
            <summary>
                This verify property value with type.
            </summary>
            <param name="classInstance"></param>
            <param name="propertyInfo"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyExceptionExtension.MessageShouldBe``1(``0,System.String,System.StringComparison)">
            <summary>
                Exceptions trimmed message should be equal to the given one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyExceptionExtension.MessageShouldNotBeEmptyOrWhiteSpace``1(``0,System.String,System.StringComparison)">
            <summary>
                Exceptions message ShouldNotBeEmptyOrWhiteSpace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyExceptionExtension.MessageShouldContains``1(``0,System.String,System.StringComparison)">
            <summary>
                Exceptions trimmed message should contains <see cref="!:message" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyExceptionExtension.ShouldBe(System.ArgumentNullException,System.String,System.String,System.StringComparison)">
            <summary>
                Exceptions trimmed message should be matching with parameter name and message.
            </summary>
            <param name="exception"></param>
            <param name="parameterName"></param>
            <param name="message"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyExceptionExtension.ShouldBe(System.ArgumentException,System.String,System.String,System.StringComparison)">
            <summary>
                Exceptions trimmed message should be matching with parameter name and message.
            </summary>
            <param name="exception"></param>
            <param name="parameterName"></param>
            <param name="message"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyValueExtension.PropertyValueVerify(System.Object,System.Type,System.String,System.Object,System.Type)">
            <summary>
                This verify property value with type  (non-static, instance, public, nonpublic).
            </summary>
            <param name="classInstance"></param>
            <param name="classInstanceType"></param>
            <param name="propertyName"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyValueExtension.StaticInstancePropertyValueVerify(System.Object,System.Type,System.String,System.Object,System.Type)">
            <summary>
                This verify property value with type (static, instance, public, nonpublic).
            </summary>
            <param name="classInstanceType"></param>
            <param name="propertyName"></param>
            <param name="expectedValue"></param>
            <param name="classInstance"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyValueExtension.StaticNonInstancePropertyValueVerify(System.Type,System.String,System.Object,System.Type)">
            <summary>
                This verify field value with type (static, instance, public, nonpublic).
            </summary>
            <param name="classInstanceType"></param>
            <param name="propertyName"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyValueExtension.FieldValueVerify(System.Object,System.Type,System.String,System.Object,System.Type)">
            <summary>
                This verify field value with type  (non-static, instance, public, nonpublic).
            </summary>
            <param name="classInstance"></param>
            <param name="classInstanceType"></param>
            <param name="fieldName"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyValueExtension.StaticInstanceFieldValueVerify(System.Object,System.Type,System.String,System.Object,System.Type)">
            <summary>
                This verify field value with type (static, instance, public, nonpublic).
            </summary>
            <param name="classInstanceType"></param>
            <param name="fieldName"></param>
            <param name="expectedValue"></param>
            <param name="classInstance"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyValueExtension.StaticNonInstanceFieldValueVerify(System.Type,System.String,System.Object,System.Type)">
            <summary>
                This verify field value with type (static, instance, public, nonpublic).
            </summary>
            <param name="classInstanceType"></param>
            <param name="fieldName"></param>
            <param name="expectedValue"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyVerifyException.VerifyExceptionType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,System.String,System.Object,System.Type)">
            <summary>
                This method will assert and verify given assert exception type given in the parameter &lt;param
                name="assertExceptionType"&gt;&lt;/param&gt;.
            </summary>
            <param name="baseSetupV2"></param>
            <param name="methodInfo"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="assertExceptionType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyVerifyException.VerifyArgumentNullExceptionType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,System.String,System.Object)">
            <summary>
                This method will assert and verify given assert type of(ArgumentNullException) thrown.
            </summary>
            <param name="baseSetupV2"></param>
            <param name="methodInfo"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ShouldlyVerifyException.VerifyArgumentExceptionType(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,System.String)">
            <summary>
                This method will assert and verify given assert type of(ArgumentNullException) thrown.
            </summary>
            <param name="baseSetupV2"></param>
            <param name="methodInfo"></param>
            <param name="parameterName"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.StringExtension">
            <summary>
                String Extensions
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.HasCharacter(System.String)">
            <summary>
                returns true if string.IsNullOrWhiteSpace(str) is false.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.IsEmptyOrSpaces(System.String)">
            <summary>
                returns true if is empty or whitespaces.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.IsEmptyOrSpaces(System.String,System.String@)">
            <summary>
                returns true if is empty or whitespaces.
                if str is null then <see cref="!:trimmedString" /> comes as string.empty.
            </summary>
            <param name="str"></param>
            <param name="trimmedString"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.FirstCharUpperRestLower(System.String)">
            <summary>
                Returns first character upper and the rest lower
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.FirstCharLowerRestUpper(System.String)">
            <summary>
                Returns first character upper and the rest upper
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.FirstCharLowerRestAsIs(System.String)">
            <summary>
                Returns first character upper and the rest upper
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.ToSingleString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Returns empty string is list is empty or null
            </summary>
            <param name="stringItems"></param>
            <param name="joiner"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.ToSingleString(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
                Returns empty string is list is empty or null
            </summary>
            <param name="stringItems"></param>
            <param name="joiner"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.ToSingleString(System.String[],System.String)">
            <summary>
                Returns empty string is list is empty or null
            </summary>
            <param name="stringItems"></param>
            <param name="joiner"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.FirstCharUpperRestAsIs(System.String)">
            <summary>
                Returns first character upper and the rest upper
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.InsertStartOnlyIfNotExist(System.String,System.String,System.StringComparison)">
            <summary>
                Returns new string by putting the <see cref="!:insertingString" /> at the beginning.
            </summary>
            <param name="str"></param>
            <param name="insertingString"></param>
            <param name="stringComparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.CombineWordsWithPascalCase(System.String,System.String,System.String)">
            <summary>
                hello-World-today-What-Day to HelloWorldTodayWhatDay if the splitter is '-', joiner : ""
            </summary>
            <param name="str"></param>
            <param name="splitter"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.StringExtension.IsStringContainsOf(System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
                Returns true if start and end symbol found.
                Example : "h{Hello}World", start:{ , end : } then return true, inside : Hello, Outside World only
            </summary>
            <param name="currentString">if list angle start int angel end given</param>
            <param name="insideValueOfStartAndEndSymbol">returns the text inside the start and end symbol</param>
            <param name="outsideValueAfterEndingSymbol">returns the text outside end symbol</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TimespanExtension.GetDisplayDuration(System.TimeSpan)">
            <summary>
                Returns a string format for display [Duration : {<see cref="M:Auk.CsharpBootstrapper.Extensions.TimespanExtension.GetDurationFormat(System.Double)" />(timeSpan.TotalHours)} hours]
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TimespanExtension.GetDisplayText(System.TimeSpan)">
            <summary>
                Get during time in meaningful time format.
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Extensions.ToStringExtension">
            <summary>
                ToString Extensions
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetDictionaryToString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Covert dictionary to string
            </summary>
            <returns>Returns one string combining all the objects by using object.ToString() method.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.ToStringEnhanced(System.Object,System.Boolean,System.Boolean,System.String[])">
            <summary>
                Generates toString for each properties and fields
            </summary>
            <param name="instance"><see cref="T:System.Object" /> type because used in the reflection.</param>
            <param name="includeInheritedMembers"></param>
            <param name="propertiesToIgnore"></param>
            <param name="isPrintTypeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.ToJson(System.Object)">
            <summary>
                Generates toString json using <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)" />
            </summary>
            <param name="instance"><see cref="T:System.Object" /> type because used in the reflection.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.ToStringEnhancedAcceptedProperties(System.Object,System.Boolean,System.Boolean,System.String[])">
            <summary>
                Generates toString for each properties and fields
            </summary>
            <param name="instance"><see cref="T:System.Object" /> type because used in the reflection.</param>
            <param name="includeInheritedMembers"></param>
            <param name="propertiesToAccept"></param>
            <param name="isPrintTypeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.ToMetaString(System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="propertyInfo"></param>
            <param name="instance"></param>
            <param name="isTypeShortName"></param>
            <param name="isIncludeValueOnToString"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetToString(System.Type,System.Object,System.Boolean,System.Boolean,System.String[])">
            <summary>
                Generates toString for each
            </summary>
            <param name="type"></param>
            <param name="instance"><see cref="T:System.Object" /> type because used in the reflection.</param>
            <param name="isPrintTypeFullName"></param>
            <param name="includeInheritedMembers"></param>
            <param name="propertiesToIgnore"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetToStringWithAcceptedOnly(System.Type,System.Object,System.Boolean,System.Boolean,System.String[])">
            <summary>
                Generates toString for each
            </summary>
            <param name="type"></param>
            <param name="instance"><see cref="T:System.Object" /> type because used in the reflection.</param>
            <param name="includeInheritedMembers"></param>
            <param name="propertiesNamesToAcceptOnly"></param>
            <param name="isPrintTypeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetArrayToString``1(``0[])">
            <summary>
                Generates toString from a given array items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayItem"></param>
            <returns>Returns empty string if given one is null.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetEnumerableToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Generates toString from a given array items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayItem"></param>
            <returns>Returns empty string if given one is null.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetListToString``1(System.Collections.Generic.IList{``0})">
            <summary>
                Generates toString from a given list items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns>Returns empty string if given one is null.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.ToStringExtension.GetListToString``1(System.Collections.Generic.List{``0})">
            <summary>
                Generates toString from a given list items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns>Returns empty string if given one is null.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ConvertToObject(System.Byte[])">
            <summary>
                Convert Raw bytes to C# Object.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ToInstance``1(System.Byte[])">
            <summary>
                Convert Raw bytes to C# Object.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ToSafeInstance``1(System.Object)">
            <summary>
                Convert Raw bytes to C# Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsList(System.Type)">
            <summary>
                Returns true for both IList and List
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstanceComponentForFields(System.Object,System.Boolean)">
            <summary>
                Create <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsPresent(System.Object)">
            <summary>
                Returns true if current item is not null.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetPublicProperties(System.Object)">
            <summary>
                Returns true if current item is not null.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetPublicPropertiesAsDictionary(System.Object)">
            <summary>
                Returns dictionary of properties.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ToSingleString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String[])">
            <summary>
                Returns empty string is list is empty or null
            </summary>
            <param name="stringItems"></param>
            <param name="joiner"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateSetPropertyValueUsingBackingField``1(System.Object,System.String,``0,System.Boolean)">
            <summary>
                Create <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" /> using <see cref="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstanceComponentForBackingField(System.Object,System.Boolean)" /> and then
                Set values to the property using <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateSetPropertyValueUsingBackingField``1(System.Object,System.String,``0,Auk.CsharpBootstrapper.Interfaces.IInstanceComponent@,System.Boolean)">
            <summary>
                Create <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" /> using <see cref="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstanceComponentForBackingField(System.Object,System.Boolean)" /> and then
                Set values to the property using <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstanceComponentForBackingField(System.Object,System.Boolean)">
            <summary>
                Create <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" /> for properties and fields
                isFields true and isProperties true.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstanceComponentForProperties(System.Object,System.Boolean)">
            <summary>
                Create <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstanceComponentForMethods(System.Object,System.Boolean)">
            <summary>
                Create <see cref="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetPropertyIndex(System.Type,System.String)">
            <summary>
                Get Property Index
            </summary>
            <param name="type">Type</param>
            <param name="propertyName">Property Name</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetFieldIndex(System.Type,System.String)">
            <summary>
                Get Property Index
            </summary>
            <param name="type">Type</param>
            <param name="fieldName">Field Name</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetAllFields(System.Type)">
            <summary>
                Get all fields for specific type
            </summary>
            <param name="type">Class type</param>
            <returns>Properties</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetAllFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
                Get all fields for specific type
            </summary>
            <param name="type">Class type</param>
            <param name="bindingFlags"></param>
            <returns>Properties</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetPublicFields(System.Type)">
            <summary>
                Get public fields for specific type
            </summary>
            <param name="type">Class type</param>
            <returns>Properties</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Get(System.Reflection.FieldInfo,System.Int32)">
            <summary>
                Get Field Value
            </summary>
            <param name="type">Class type</param>
            <param name="index"></param>
            <returns>Properties</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetPropertyValue(System.Reflection.FieldInfo,System.String,System.Int32)">
            <summary>
                Get Field Property Value
            </summary>
            <param name="fieldInfo">Class type</param>
            <param name="propertyName"></param>
            <param name="index"></param>
            <returns>Properties</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetPropertyInfo(System.Reflection.FieldInfo,System.String)">
            <summary>
                Get PropertyInfo by property name
            </summary>
            <param name="fieldInfo"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateIfNull``2(``0,``1@,System.Type)">
            <summary>
                Create if null
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="instance"></param>
            <param name="itemToInitialize"></param>
            <param name="type"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateIfNullWithParameters``1(``0,System.Object[])">
            <summary>
                Create instance with a func if and only if the instance is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateIfNullWithFunc``1(``0,System.Func{``0})">
            <summary>
                Create instance with a func if and only if the instance is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetInstanceAs``1(System.Object)">
            <summary>
                Get the converted instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateInstance``1(System.Type,System.Boolean,System.Int32,System.Int32)">
            <summary>
                Create Instance of Specific Type
            </summary>
            <param name="type">Class Type</param>
            <param name="isSetDefaultValues"></param>
            <param name="listIndex"></param>
            <param name="recursiveInitializeMembers">
                Level to initialize nested properties and fields. Based on the number the
                members will be initialized up to the level declared.
            </param>
            <returns>Instance object</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.CreateUninitializedObject(System.Type)">
            <summary>
                Create Uninitialized Object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.InitUninitializedProperties(System.Object,System.Boolean,System.Int32,System.Int32)">
            <summary>
                Initialized
            </summary>
            <param name="instance"></param>
            <param name="listIndex"></param>
            <param name="recursiveInitializeMembers">Based on the number the members will be initialized up to the level declared.</param>
            <param name="isSetDefaultValues"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ShouldBeEquivalentTo``1(``0,``0,System.String[])">
            <summary>
                Object Graph Comparison
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="ignorePropertiesNames">Properties to be ignored in comparing</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Get(System.Type,System.String,System.Int32,System.Boolean)">
            <summary>
                Generate value for given Type
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="type">Type</param>
            <param name="index">Field or Property index</param>
            <param name="setDefaultValues">Set Default Values If true</param>
            <returns>Generated value</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ToByteArray(System.Object)">
            <summary>
                Object to Byte Array
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Get(System.Type,System.Int32)">
            <summary>
                Get value for given Type
            </summary>
            <param name="type">Type</param>
            <param name="index">Field or Property index</param>
            <returns>Generated value</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetDefaultValue(System.Type)">
            <summary>
                Get Default Value
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.GetAllProperties(System.Type)">
            <summary>
                Get all properties for specific type
            </summary>
            <param name="type">Class type</param>
            <returns>Properties</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Get``1(System.Byte[])">
            <summary>
                Object to Byte Array
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsGenericParametersOpenToApply(System.Type)" -->
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsCollectionType(System.Type)">
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                The current <see cref="T:System.Type" /> represents a type that implements
                the same generic interface with different type arguments.
            </exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsEnumerableType(System.Type)">
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                The current <see cref="T:System.Type" /> represents a type that implements
                the same generic interface with different type arguments.
            </exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsCollectionOrEnumerableType(System.Type)">
            <exception cref="T:System.Reflection.AmbiguousMatchException">
                The current <see cref="T:System.Type" /> represents a type that implements
                the same generic interface with different type arguments.
            </exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsStatic(System.Type)">
            <summary>
                If type is IsAbstract and IsSealed
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Create``1(System.Type)">
            <summary>
                Create only if possible or else return null.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.PropertiesToString``1(``0)">
            <exception cref="T:System.ArgumentNullException"><paramref name="currentItem" /> is <see langword="null" /></exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.InjectPropertiesValuesInBaseByDerivedType``2(``0,``1,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Inject same name properties of base from derived instance
            </summary>
            <typeparam name="TDerived"></typeparam>
            <typeparam name="TBase"></typeparam>
            <param name="derivedInstance"></param>
            <param name="baseInstance"></param>
            <param name="isIncludeInheritedMembers"></param>
            <param name="isLogWarningIfPropertyNotPresent"></param>
            <param name="isPrintBothModel"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.SafeCastCreate``2(``0,``1,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Create the <see cref="!:TDerive" /> and populate similar fields from base.
                It is not necessary to be Inherited from <see cref="!:TBase" />, however, the only match property names with same
                type will be mapped and filled for the <see cref="!:TDerive" /> type.
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TDerive"></typeparam>
            <param name="baseInstance"></param>
            <param name="deriveInstance"></param>
            <param name="isIncludeInheritedMembers"></param>
            <param name="isLogWarningIfPropertyMismatchOrNotFound"></param>
            <param name="isPrintBothModel"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.SafeCastCreate``2(``0,System.Object[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Create the <see cref="!:TDerive" /> and populate similar fields from base.
                It is not necessary to be Inherited from <see cref="!:TBase" />, however, the only match property names with same
                type will be mapped and filled for the <see cref="!:TDerive" /> type.
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TDerive"></typeparam>
            <param name="baseInstance"></param>
            <param name="parameters"></param>
            <param name="isIncludeInheritedMembers"></param>
            <param name="isLogWarningIfPropertyMismatchOrNotFound"></param>
            <param name="isPrintBothModel"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.SafeInjectPropertiesValuesWithSameNames``2(``1,``0,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Inject same name properties if not exist then continue.
                No exception thrown
            </summary>
            <typeparam name="TBase"></typeparam>
            <typeparam name="TDerive"></typeparam>
            <param name="baseInstance"></param>
            <param name="derivedInstance"></param>
            <param name="isIncludeInheritedMembers"></param>
            <param name="isLogWarningIfPropertyMismatchOrNotFound"></param>
            <param name="isPrintBothModel"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Create``1(System.Type,System.Object[])">
            <summary>
                Create only if possible or else return null.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Create``1(System.Type,System.Exception@,System.Object[])">
            <summary>
                Create only if possible or else return null.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Create(System.Type,System.Object[])">
            <summary>
                Create only if possible or else return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.Create(System.Type)">
            <summary>
                Create only if possible or else return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.ResolveGenericArgumentUsingDictionary(System.Type,System.Collections.Generic.IDictionary{System.String,System.Type[]})">
            <summary>
                Resolve given <see cref="T:System.Type" />'s generic argument from dictionary key values
            </summary>
            <param name="type"></param>
            <param name="genericTypeDictionary">
                <see cref="T:System.Collections.Generic.KeyValuePair`2" /> key as typeof(T).FullName, value contains multiple generic argument
            </param>
            <returns>Return type as is if gets into error or no item found in the <see cref="!:genericTypeDictionary" /></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Extensions.TypeExtension.IsTypeMatchesEitherWith(System.Type,System.Type,System.Type)">
            <summary>
                Checks with given type if either one of the type matches.
                Throw if <see cref="!:currentType" /> is null.
            </summary>
            <param name="currentType"></param>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ApiHelper.GetUrlContent(System.String,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Download url content as string, if failed then return as empty string.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ApiHelper.GetUrlsContents(System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Download multiple url contents
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ApiHelper.GetFirstUrlContent(System.String[],System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Download url content as string,
                Given Urls will be tried one by another.
                If failed then return as empty string.
                The First one which returns data will return the result.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.MillisecondHelper">
            <summary>
                Milliseconds helper.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MillisecondHelper.GetSecondsToMilliseconds(System.Int32)">
            <summary>
                Returns 0 if seconds is less than 0.
                Or else returns seconds * CommonDefaultValue.TimeOneSecondToMilliseconds
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MillisecondHelper.GetMinutesToMilliseconds(System.Int32)">
            <summary>
                Returns 0 if seconds is less than 0.
                Or else returns minutes * CommonDefaultValue.TimeSixtySecondToMilliseconds
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MillisecondHelper.GetHoursToMilliseconds(System.Int32)">
            <summary>
                Returns 0 if seconds is less than 0.
                Or else returns GetMinutesToMilliseconds(hours * 60)
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MillisecondHelper.GetDaysToMilliseconds(System.Int32)">
            <summary>
                Returns 0 if seconds is less than 0.
                Or else returns GetHoursToMilliseconds(days * 24)
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MutexHelper.CreateSystemWideMutex(System.String)">
            <exception cref="T:System.UnauthorizedAccessException">
                The named mutex exists and has access control security, but the user does
                not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.
            </exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MutexHelper.RunActionWithMutex(System.Action,System.String)">
            <summary>
                Returns true if execution is successful.
            </summary>
            <param name="action"></param>
            <param name="label">Must be unique for the action to be locked using mutex.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MutexHelper.RunActionWithMutex``1(System.Action{``0},``0,System.String)">
            <summary>
                Returns true if execution is successful.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <param name="argument"></param>
            <param name="label">Must be unique for the action to be locked using mutex.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.MutexHelper.GetMutexHashNameFromActualKey(System.String)">
            <summary>
                Get the hash code for the resource name given.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper">
            <summary>
                It is useful for mostly run tasks parallel
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.CompleteAll(Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger,System.Int32,System.Boolean,System.Action[])">
            <summary>
                Runs actions parallel and complete
            </summary>
            <param name="parallelRun"></param>
            <param name="suspendExceptionThrow"></param>
            <param name="actions"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.CompleteAll(System.String,System.Int32,System.Boolean,System.Action[])">
            <summary>
                Runs actions parallel and complete
            </summary>
            <param name="parallelRun"></param>
            <param name="rootTaskName"></param>
            <param name="suspendExceptionThrow"></param>
            <param name="actions"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.CompleteAll(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.ValueTuple{System.Action,System.String}[])">
            <summary>
                Runs actions parallel and complete
            </summary>
            <param name="parallelRun"></param>
            <param name="rootTaskName"></param>
            <param name="suspendExceptionThrow"></param>
            <param name="actionsTuples"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.CompleteAllUsingThreads(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.ValueTuple{System.Action,System.String}[])">
            <summary>
                Runs actions parallel and complete
            </summary>
            <param name="parallelRun"></param>
            <param name="rootTaskName"></param>
            <param name="timeInMinutes">
                -1 meaning no timeouts.
            </param>
            <param name="suspendExceptionThrow"></param>
            <param name="actionsTuples"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.GetCompletedDifferentFunctionResultsUsingThreads``1(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Func{``0}[])">
            <summary>
                Runs Func parallel and complete and returns all the stored result.
            </summary>
            <param name="rootTaskName"></param>
            <param name="callerLineNumber"></param>
            <param name="timeInMinutes">
                -1 meaning no timeouts.
            </param>
            <param name="callerFilePath"></param>
            <param name="isThrowException"></param>
            <param name="isPrintStatus"></param>
            <param name="functions"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.GetCompletedSameFunctionResultsUsingThreads``2(System.Func{``0,``1},System.Collections.Generic.IList{``0},System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Runs Func parallel and complete and returns all the stored result.
            </summary>
            <param name="func"></param>
            <param name="rawInputList"></param>
            <param name="rootTaskName"></param>
            <param name="callerLineNumber"></param>
            <param name="timeInMinutes">
                -1 meaning no timeouts.
            </param>
            <param name="callerFilePath"></param>
            <param name="isThrowException"></param>
            <param name="isPrintStatus"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.ProcessSingleTupleAction(System.String,System.String,System.Int32,System.Boolean,System.ValueTuple{System.Action,System.String},System.Boolean)">
            <summary>
                Runs single Action with logs, start, end duration.
            </summary>
            <param name="rootTaskName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="suspendExceptionThrow"></param>
            <param name="actionTuple"></param>
            <param name="isPrintStatus"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.GetSingleFunctionResult``2(System.String,System.String,System.Int32,System.Boolean,System.ValueTuple{System.Func{``0,``1},``0,System.String},System.Boolean)">
            <summary>
                Get single  function result.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="rootTaskName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="suspendExceptionThrow"></param>
            <param name="functionTuple"></param>
            <param name="isPrintStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParallelTaskHelper.GetSingleParameterFunctionResult``1(System.String,System.String,System.Int32,System.Boolean,System.ValueTuple{System.Func{``0},System.String},System.Boolean)">
            <summary>
                Get single  function result.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="rootTaskName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="suspendExceptionThrow"></param>
            <param name="functionTuple"></param>
            <param name="isPrintStatus">Prints start and end info.</param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.SingletonHelper">
            <summary>
                Create items single instance helper.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SingletonHelper.Create``1(System.Func{``0},System.Object[],System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Create singleton instance by using the creator helpers.
                If a complex type then a better way should be giving the func to create it using it's constructor's
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <param name="parameters">It will be useful only when func is null and used dynamically to create the type.</param>
            <param name="isSetDefaultValues">Initialize any member fields/properties.</param>
            <param name="listIndex"></param>
            <param name="recursiveInitializeMembers">
                Level to initialize nested properties and fields. Based on the number the
                members will be initialized up to the level declared.
            </param>
            <param name="isTryMultiplePathsToCreate">
                if true then if one path failed then try with another one to create the object.
            </param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SingletonHelper.Create``1(System.Func{``0},System.String)">
            <summary>
                Create the singleton object or a object once only by it's given <see cref="!:functionUniqueNameToCreateSingleton" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <param name="functionUniqueNameToCreateSingleton">Key to create the singleton</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SingletonHelper.ToStringStates">
            <summary>
                ToString of all the values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.ActionHelper">
            <summary>
                Action Helper, helper methods related to action or func
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.DoesActionThrowException(System.Action,System.String,System.Int32)">
            <summary>
                Returns true if action throw exception.
            </summary>
            <param name="action"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns>
                Returns true if exception has been thrown.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.GetValidResultOf``1(System.Func{Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult{``0}},System.String,System.Boolean,System.String,System.Int32)">
            <summary>
                Returns true if action throw exception.
            </summary>
            <param name="func"></param>
            <param name="isThrow"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="functionName"></param>
            <returns>
                Returns valid result everything is okay or else invalid.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.GetValidResult``1(System.Func{``0},System.String,System.Boolean,System.String,System.Int32)">
            <summary>
                Returns true if action throw exception.
            </summary>
            <param name="func"></param>
            <param name="isThrow"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="functionName"></param>
            <returns>
                Returns valid result everything is okay or else invalid.
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.LazyGetter``1(System.Func{``0},System.String,System.String,System.Int32)">
            <summary>
                Creates a new LazyGetter <see cref="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.LazyGetter``1(System.Action,System.String,System.String,System.Int32)">
            <summary>
                Creates a new LazyGetter <see cref="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.LazyReloadAction(System.Object[])">
            <summary>
                Creates a new LazyGetter <see cref="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.LazyGetter``1(System.Func{System.Boolean},System.Func{``0},System.String,System.String,System.Int32)">
            <summary>
                Creates a new LazyGetter <see cref="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conditionalIf">if Condition true then returns the value.</param>
            <param name="logic"></param>
            <param name="functionName"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.InvokeActionBySuppressingException(System.Action)">
            <summary>
                Invoke action without throwing the exception if occurred
            </summary>
            <param name="action"></param>
            <returns>
                Invoke action without throwing the exception if occurred
            </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.DoesActionThrowException``1(System.Action{``0},``0,System.String,System.Int32)">
            <summary>
                Returns true if action throw exception
            </summary>
            <param name="action"></param>
            <param name="instance"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.GetActionException(System.Action,System.String,System.Int32)">
            <summary>
                Catch exception from action execution.
            </summary>
            <param name="action"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.GetActionException``1(System.Action{``0},``0,System.String,System.Int32)">
            <summary>
                Catch exception from action execution.
            </summary>
            <param name="action"></param>
            <param name="instance"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.GetResultWithTimeWrapper``1(System.Func{``0},System.String,System.Type,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Try to execute method in time limit.
                By default 4 minutes = 240000 milliseconds.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="funcitonName"></param>
            <param name="filePath"></param>
            <param name="timeInMilliseconds"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.ThreadWithTime(System.Int32,System.Threading.ThreadStart,System.String,System.Action,System.Action,System.String,System.Int32)">
            <summary>
                Given <see cref="!:initialAction" /> will be executed in an inner
                thread with timer to abort, if the task executed in time then
                no error if not then throws exception and based on the pass/fail
                execute given action in the parameter.
            </summary>
            <param name="timeMilliseconds"></param>
            <param name="initialAction"></param>
            <param name="functionName"></param>
            <param name="onTimeoutAction">
                Null can be passed and will be ignored if null.
                If Given then will run if timeout happens.
            </param>
            <param name="onSuccess">Null can be passed and will be ignored if null.</param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.ThreadWithSuppressException(System.Action,System.Action,System.Action,System.String,System.Int32)">
            <summary>
                Execute path based action based on initial action's throw.
                If given <see cref="!:initialAction" /> throws then execute <see cref="!:onFail" />
                and if that doesn't throw then execute <see cref="!:onSuccess" /> if not null.
            </summary>
            <param name="initialAction"></param>
            <param name="onFail"></param>
            <param name="onSuccess"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.ThreadRun(System.Threading.ThreadStart,System.Action,System.Action,System.String,System.Int32)">
            <summary>
                Run Given action in async and execute path based action based on initial action's throw.
                If given <see cref="!:initialAction" /> throws then execute <see cref="!:onFail" />
                and if that doesn't throw then execute <see cref="!:onSuccess" /> if not null.
            </summary>
            <param name="initialAction"></param>
            <param name="onFail">Null can be passed and will be ignored if null.</param>
            <param name="onSuccess">Null can be passed and will be ignored if null.</param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.ReTry``1(System.Func{Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult{``0}},System.String,System.Boolean,System.Int32,System.Int32,System.Action,System.Action,System.String,System.Int32)">
            <summary>
                Try to execute <see cref="!:initialAction" />
                if given result is NOT <see cref="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult`1.IsValid" /> or throws then retry again.
                <para></para>
                Wait before recalling again if failed and try for certain time based on <see cref="!:tryFor" /> parameter.
            </summary>
            <param name="initialAction"></param>
            <param name="functionName"></param>
            <param name="isPrintMessages">If true then it will print success fail message using log4net.</param>
            <param name="tryFor"></param>
            <param name="againTryInSeconds">
                Converts the given seconds to milliseconds (*1000)
            </param>
            <param name="onFail"></param>
            <param name="onSuccess"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.TryExecute(System.Action,System.Int32,System.Int32,System.Action,System.Action,System.String,System.Int32)">
            <summary>
                Try to execute an action and wait if failed and try for certain time based on <see cref="!:tryFor" /> parameter.
            </summary>
            <param name="initialAction"></param>
            <param name="tryFor"></param>
            <param name="eachTryWaitForMilliseconds"></param>
            <param name="onFail"></param>
            <param name="onSuccess"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.RunOnThread(System.String,System.Threading.ThreadStart,System.Action,System.Action,System.Int32,System.Boolean,System.String,System.Int32)">
            <summary>
                Starts the the thread immediately.
            </summary>
            <param name="functionName"></param>
            <param name="threadStart"></param>
            <param name="onSuccess"></param>
            <param name="minutesTimeOut">
                If given number is > 0 then converted to milliseconds then run as timeout.
            </param>
            <param name="isJoin"></param>
            <param name="onTimeoutAction"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.TryExecute``1(System.String,System.Func{``0},System.Int32@,System.Int32,System.Int32,System.Action,System.Action)">
            <summary>
                Try to execute an action and wait if failed and try for certain time based on <see cref="!:tryFor" /> parameter.
            </summary>
            <param name="functionName"></param>
            <param name="initialAction"></param>
            <param name="triedTimes"></param>
            <param name="tryFor"></param>
            <param name="eachTryWaitForMilliseconds"></param>
            <param name="onFail"></param>
            <param name="onSuccess"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.AttachRecallActionEvent(System.Action,System.String,System.Int32,System.Threading.Thread@,System.Int32,System.String,System.Int32)">
            <summary>
                Run the action time to time
            </summary>
            <param name="action"></param>
            <param name="functionName"></param>
            <param name="runAgainInSeconds"></param>
            <param name="thread"></param>
            <param name="runFor">-1 means run in definite.</param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ActionHelper.ThreadWithTime(System.Int32,System.Threading.ThreadStart,System.String,System.Action)">
            <summary>
                Time the execution if not finish in given time.
            </summary>
            <param name="timeMilliseconds"></param>
            <param name="initialAction"></param>
            <param name="functionName"></param>
            <param name="finalAction"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.DirectoryHelper">
            <summary>
                Directory related helper methods
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.CreateDirectoryIfNotExists(System.String)">
            <summary>
                Creates the directory <paramref name="directoryPath" /> if it doesn't exists
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetMultipleDirectoryFiles(System.String[],System.String)">
            <summary>
                Skip files which has test.cs at, Shims, \obj\,\debug\
            </summary>
            <param name="directoryLocations"></param>
            <param name="fileByExtension">Default(*.*)</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetFileInfos(System.String,System.String[],System.String[],System.String[],System.StringComparison)">
            <summary>
                Skip files which has test.cs at, Shims, \obj\,\debug\
            </summary>
            <param name="path"></param>
            <param name="acceptableFileNames"></param>
            <param name="acceptableExtensions"></param>
            <param name="skippingExtensions"></param>
            <param name="stringComparison"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.IsDirectoryExists(System.String)">
            <summary>
                Its better move this code to helper method Single Responsibility
            </summary>
            <param name="path"> File path to search</param>
            <returns> Returns true if file exists</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetCsharpAbsoluteFilePathsWithoutTestsFiles(System.String,System.String)">
            <summary>
                Skip files which has test.cs at, Shims, \obj\,\debug\
            </summary>
            <param name="stringPath"></param>
            <param name="fileByExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetCsharpAbsoluteFilePathsWithoutDotTestFilesOnly(System.String,System.String)">
            <summary>
                Skip files which has test.cs at, Shims, \obj\,\debug\
            </summary>
            <param name="stringPath"></param>
            <param name="fileByExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetCsharpAbsoluteFilePathsOfTestsFiles(System.String,System.String)">
            <summary>
                Skip files which has test.cs at, Shims, \obj\,\debug\
            </summary>
            <param name="stringPath"></param>
            <param name="fileByExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.CreateFileDirectoryIfNotExists(System.String)">
            <summary>
                Creates directory if given file's directory not exists
            </summary>
            <param name="filePath"> File path parameter</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetBaseOrAppDirectory">
            <summary>
                AppDomain.CurrentDomain.BaseDirectory
            </summary>
            <returns>returns AppDomain.CurrentDomain.BaseDirectory</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetPathFromBase(System.String)">
            <summary>
                returns the absolute path using the relative path from base directory.
            </summary>
            <returns>returns AppDomain.CurrentDomain.BaseDirectory + relativePath</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.ExpandPaths(System.String)">
            <summary>
                AppDomain.CurrentDomain.BaseDirectory
                Changes ~ to deploying directory or running directory.
                Expands environment variables.
                Expand variables reference in path.
            </summary>
            <returns>returns AppDomain.CurrentDomain.BaseDirectory</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.ExpandPaths(System.String,System.Object,System.Boolean)">
            <summary>
                AppDomain.CurrentDomain.BaseDirectory
                Changes ~ to deploying directory or running directory.
                Expands environment variables.
                Expand variables reference in path. Expands any {} variables.
            </summary>
            <param name="path">a single path</param>
            <param name="model">if null then only environment variables and telda will be expanded and model will be ignored.</param>
            <param name="includeInheritedMembers"></param>
            <returns>returns AppDomain.CurrentDomain.BaseDirectory</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetPathCombineFromBase(System.String[])">
            <summary>
                Combined given paths with <see cref="F:System.IO.Path.DirectorySeparatorChar" />
            </summary>
            <param name="relativePaths"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetAbsolutePathFromUri">
            <summary>
                new Uri(ConfigJson.Assembly.CodeBase).AbsolutePath
                Problem with this that it returns for space in Windows 10 it adds %20%
                So if path has "Hello World" return "Hello%20%World";
            </summary>
            <returns>return new Uri(ConfigJson.Assembly.CodeBase).AbsolutePath</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetAssemblyPath">
            <summary>
                Assembly.GetExecutingAssembly().CodeBase
                Returns permanent assembly running directory.
            </summary>
            <returns>returns Assembly.GetExecutingAssembly().CodeBase</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.CurrentDirectoryUsingDirectory">
            <summary>
                Directory.GetCurrentDirectory
            </summary>
            <returns>returns Directory.GetCurrentDirectory</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
                This method gives only filenames extracting name from the file full name
                Example: ClassA.cs returns ClassA
            </summary>
            <param name="fileNameWithExtension"> File name with extension</param>
            <returns> Returns only file name </returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.MakeRelativePath(System.String,System.String)">
            <summary>
                Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromPath">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path or <c>toPath</c> if the paths are not related.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.CopyDirectoryRecursively(System.String,System.String)">
            <summary>
                Copy directory with all files
            </summary>
            <param name="fromPath">Contains the source directory absolute path.</param>
            <param name="toPath">Contains the destination directory absolute path.</param>
            <exception cref="T:System.InvalidOperationException">Target directory exists.</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetSubDirectoryNamesOfPath(System.String)">
            <summary>
                Returns directory names inside the given directory path. Returns empty enumerable if directory doesn't exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.DeleteDirectory(System.String)">
            <summary>
                Deletes folder. Use this method if you need to remove folder with ".git" folder
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.SetFileAttributeToNormal(System.String)">
            <summary>
                Sets <see cref="F:System.IO.FileAttributes.Normal" /> for all files inside the directory
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DirectoryHelper.GetDirectoryName(System.String)">
            <summary>
                Returns directory name from the path
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DynamicLinkLibarayHelper.GetTypes(System.String,Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger)">
            <summary>
                Loads assembly and get the types in assembly.
            </summary>
            <param name="dllPath">Dll Path</param>
            <param name="logger">logger</param>
            <remarks>In case of ReflectionTypeLoadException, which resulted from loading faulty library, empty array is returned</remarks>
            <returns>Array of Type</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DynamicLinkLibarayHelper.GetAssembliesWithParams``1(System.String,System.String,System.Object[])">
            <summary>
                Load dynamic assemblies classes in a constructed manner only it matches with the given type in T
            </summary>
            <typeparam name="T">Given type</typeparam>
            <param name="dynamicLinkLibrariesPath">Directory path to load dll files.</param>
            <param name="extension"></param>
            <param name="parameters">Pass parameters to instantiate object.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.DynamicLinkLibarayHelper.GetAssemblies``1(System.String,System.String,System.Object[])">
            <summary>
                Load dynamic assemblies classes in a constructed manner only it matches with the given type in T
            </summary>
            <typeparam name="T">Given type</typeparam>
            <param name="dynamicLinkLibrariesPath">Directory path to load dll files.</param>
            <param name="extension"></param>
            <param name="parameters">Pass parameters to instantiate object.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyAbstractClassVerifiesProperties``1(AutoFixture.IFixture)">
            <summary>
                This method is going to explore and verify Public NonPublic properties of abstract class.
            </summary>
            <typeparam name="TAbstract">Pass the abstract class.</typeparam>
            <param name="fixture"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyAbstractClassVerifiesMethod``1(AutoFixture.IFixture,System.Int32,System.Int32,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                This method is going to explore and verify Public NonPublic properties of abstract class.
            </summary>
            <typeparam name="TAbstract">Pass the abstract class.</typeparam>
            <param name="fixture"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyStaticClassVerifiesProperties(AutoFixture.IFixture,System.Type)">
            <summary>
                This method is going to explore and verify NonPublic fields based on page separate.
            </summary>
            <param name="fixture"></param>
            <param name="type"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyStaticClassStaticProperty(AutoFixture.IFixture,System.Type,System.String)">
            <summary>
                This method is going to explore and verify NonPublic fields based on page separate.
            </summary>
            <param name="fixture"></param>
            <param name="type"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.PropertyTypeVerify``2(``0,System.String,AutoFixture.IFixture)">
            <summary>
                This method is going to verify value and type of the property (public/non-public and non-static)
            </summary>
            <param name="classInstance"></param>
            <param name="propertyName"></param>
            <param name="fixture"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.PropertyTypeVerify``2(``0,System.String)">
            <summary>
                This method is going to verify value and type of the property (public/non-public and non-static)
            </summary>
            <param name="classInstance"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyStaticClassVerifiesMethodCalls(AutoFixture.IFixture,System.Type,System.Int32,System.Int32,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                This method is going to explore and verify NonPublic fields based on page separate.
            </summary>
            <param name="fixture"></param>
            <param name="type"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyNonPublicProperties``1(AutoFixture.IFixture)">
            <summary>
                This method is going to explore and verify Public NonPublic properties of abstract class.
            </summary>
            <param name="fixture"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyNonPublicPropertiesWithInstance(System.Object,AutoFixture.IFixture)">
            <summary>
                This method is going to explore and verify Public NonPublic properties of abstract class.
            </summary>
            <param name="classInstance"></param>
            <param name="fixture"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyConstructor``1(AutoFixture.IFixture,System.Int32)">
            <summary>
                This method is going to explore and verify indexed constructor.
            </summary>
            <param name="fixture"></param>
            <param name="constructorIndex"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyConstructorByGivenParameters(System.Type,System.Type[],System.Object[])">
            <summary>
                This method is going to explore and verify constructor by given parameters types.
            </summary>
            <param name="type"></param>
            <param name="parametersTypes"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyConstructorByDynamicParameters(System.Type,AutoFixture.IFixture,System.Type[])">
            <summary>
                This method is going to explore and verify constructor by dynamic parameters.
            </summary>
            <param name="type"></param>
            <param name="fixture"></param>
            <param name="parametersTypes"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyConstructors``1(AutoFixture.IFixture)">
            <summary>
                This method is going to explore and verify constructors.
            </summary>
            <param name="fixture"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreVerifyStaticMethodsWithOrWithoutInstance(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Object,System.String,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType,System.Object[])">
            <summary>
                This method is going to explore and verify static methods by name.
            </summary>
            <param name="baseSetupTest"></param>
            <param name="instance"></param>
            <param name="methodName"></param>
            <param name="methodExploreType"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreMethodWithOrWithoutInstance(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Object,System.String,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType,System.Object[])">
            <summary>
                This method is going to explore and verify static methods by name.
            </summary>
            <param name="baseSetupTest"></param>
            <param name="instance"></param>
            <param name="methodName"></param>
            <param name="methodExploreType"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreMethodWithOrWithoutInstance(System.Object,AutoFixture.IFixture,System.Reflection.MethodInfo,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Explore method with or without instance.
            </summary>
            <param name="instance"></param>
            <param name="fixture"></param>
            <param name="methodInfo"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ExploreHelper.ExploreMethodInstanceV2(Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test,System.Reflection.MethodInfo,Auk.CsharpBootstrapper.StaticTypes.MethodExploreType)">
            <summary>
                Explore method with or without instance.
            </summary>
            <param name="setupV2Test"></param>
            <param name="methodInfo"></param>
            <param name="methodExploreType"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.FileHelper">
            <summary>
                File related helping methods.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.GetRelativePathOf(System.String,System.String)">
            <summary>
                Returns relative path of the current file from it's root directory.
            </summary>
            <param name="rootDirectoryOfTheFile"></param>
            <param name="currentFileLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.IsFileExists(System.String)">
            <summary>
                Its better move this code to helper method Single Responsibility
            </summary>
            <param name="path"> File path to search</param>
            <returns> Returns true if file exists</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.IsAllFilesExists(System.String[])">
            <summary>
                Returns true if all the paths exist and valid. also fix the long paths before checking.
            </summary>
            <param name="paths"> File path to search</param>
            <returns> Returns true if file exists</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.ProcessEachLineWithStreamer(System.String,System.Action{System.String},System.Int32)">
            <summary>
                Process buffer text with streamer
            </summary>
            <param name="absoluteFilePath"></param>
            <param name="bufferTextProcessor">Each buffer sized text will go through this function to process it.</param>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.ReadAllText(System.String)">
            <summary>
                A wrapper around File.ReadAllText, it will log exceptions during reading.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.ReadAllText(System.String,System.IO.FileInfo@)">
            <summary>
                A wrapper around File.ReadAllText, it will log exceptions during reading.
            </summary>
            <param name="path"></param>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.ReadAllLinesShared(System.String)">
            <summary>
                Lock and read files using shared mode. FileShare.Read
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.CreateSafeFileInfo(System.String)">
            <summary>
                Create FileInfo with safe try catch.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.ReadAllBytes(System.String)">
            <summary>
                Read all bytes from file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.WriteAllBytesSafe(System.String,System.Byte[])">
            <summary>
                Fix the long path first and then create the folder using a try and then write the file.
            </summary>
            <param name="path"></param>
            <param name="allBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.WriteAllTextSafe(System.String,System.String)">
            <summary>
                Fix the long path first and then create the folder using a try and then write the file.
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.AppendSafeText(System.String,System.String,System.String,System.Int32)">
            <summary>
                Fix the long path first and then create the folder using a try and then write the file.
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.AppendSafeLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32)">
            <summary>
                Fix the long path first and then create the folder using a try and then write the file.
            </summary>
            <param name="path"></param>
            <param name="lines"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.FileHelper.WriteAllLinesSafe(System.String,System.String[],System.String,System.Int32)">
            <summary>
                Fix the long path first and then create the folder using a try and then write the file.
            </summary>
            <param name="path"></param>
            <param name="lines"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ListHelper.CreateList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Create list even if <see cref="!:items" /> are null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="defaultCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ListHelper.CreateCombineListOf``1(System.Int32,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
                Create list even if <see cref="!:itemsOfItems" /> are null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfItems">If empty or null then creates an empty list and returns</param>
            <param name="defaultCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ListHelper.ParallelCreateCombineListOf``1(System.Int32,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
                Create list even if <see cref="!:itemsOfItems" /> are null or empty.
                Requires more memory
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfItems">If empty or null then creates an empty list and returns</param>
            <param name="defaultCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ListHelper.ParallelCreateCombineListOf``1(System.Int32,System.Collections.Generic.IList{``0}[])">
            <summary>
                Create list even if <see cref="!:itemsOfItems" /> are null or empty.
                Requires more memory
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfItems">If empty or null then creates an empty list and returns</param>
            <param name="defaultCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ListHelper.ParallelCreateCombineListOf``1(System.Int32,``0[][])">
            <summary>
                Create list even if <see cref="!:itemsOfItems" /> are null or empty.
                Requires more memory
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfItems">If empty or null then creates an empty list and returns</param>
            <param name="defaultCapacity"></param>
            <returns></returns>
        </member>
        <member name="F:Auk.CsharpBootstrapper.Helper.LogHelper.LoggerNewLine">
            <summary>
                "\n{CommonIdentifiers.EightSpaces}"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.Helper.LogHelper.StatePrinter">
            <summary>
                State printer.
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.Helper.LogHelper._isVerboseInfo">
            <summary>
                Is line statements going to be short or full.
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.Helper.LogHelper._isDebugMode">
            <summary>
                Deals with logging statement line info or not.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.EnableDebugMode">
            <summary>
                By setting this, we will be adding line info in the logging.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.DisableDebugMode">
            <summary>
                By setting this, we will NOT be adding line info in the logging.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetDebugModeState">
            <summary>
                Returns the current debug mode state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.EnableVerboseLogMode">
            <summary>
                By setting this, we will be displaying verbose details
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.DisableVerboseLogMode">
            <summary>
                By setting this, we will NOT be adding line info in the logging.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetVerboseInfoModeState">
            <summary>
                Returns the current verbose mode state (enabled true or false).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogger">
            <summary>
                Get the Log4Net logger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetConfiguredLog4Net(System.Reflection.Assembly,System.String,System.String)">
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.TryGet(System.Action,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Suppress throwing function.
            </summary>
            <param name="function"></param>
            <param name="functionName"></param>
            <param name="isStartEndLog"></param>
            <param name="isLogDuration"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.TryGet``2(System.Func{``0,``1},``0,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Try out method calling with logger.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="function"></param>
            <param name="arg1"></param>
            <param name="isThrow"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="functionName"></param>
            <param name="isStartEndLog"></param>
            <param name="isLogDuration"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.TryGet``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Try out method calling with logger.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="function"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="type"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.InjectLog4NetLogger(log4net.ILog)">
            <summary>
                LogManager.GetLogger(assemblyName, name) -> <see cref="!:LogManager.GetLogger(assemblyName, name);" />
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.DumpListDataToLog(System.Type,System.Collections.Generic.IList{System.String},System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
                Dump list of data to log and console.
            </summary>
            <param name="placeType"></param>
            <param name="list"></param>
            <param name="additionalString"></param>
            <param name="isEnabledLock">Use a lock before joining data and clear the list.</param>
            <param name="isPrintingError">Prints message to error console.</param>
            <param name="isClearWhenDone">Clear the given <see cref="!:list" /> if true.</param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.Info(System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Info data logged using Log4Net or Trace
            </summary>
            <param name="variableName"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.PrintGetStart(System.Boolean,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32,System.String[])">
            <summary>
                Info data logged using Log4Net or Trace
            </summary>
            <param name="isPrint"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="messages"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.PrintGetEnd(System.DateTime,System.TimeSpan@,System.Boolean,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32,System.String[])">
            <summary>
                Info data logged using Log4Net or Trace
            </summary>
            <param name="isPrint"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="startDateTime"></param>
            <param name="durationRaw"></param>
            <param name="messages"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.PrintGetStart(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType)">
            <summary>
                Print Ending with Duration summary from datetime.
            </summary>
            <param name="isPrint"></param>
            <param name="loggerResultType"></param>
            <param name="message4"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="message1"></param>
            <param name="message2"></param>
            <param name="message3"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.PrintWithEndAndDuration(System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType)">
            <summary>
                Print Ending with Duration summary from datetime.
            </summary>
            <param name="isPrint"></param>
            <param name="loggerResultType"></param>
            <param name="message4"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="startDateTime"></param>
            <param name="message1"></param>
            <param name="message2"></param>
            <param name="message3"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.PrintWithEndAndDuration(System.DateTime,System.Boolean,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32,System.String[])">
            <summary>
                Print with end and duration.
            </summary>
            <param name="isPrint"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="startDateTime"></param>
            <param name="messages"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.InfoMessage(System.String,System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Info data logged using Log4Net or Trace
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
            <param name="data4"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="data3"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.ErrorMessage(System.String,System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Error data logged using Log4Net or Trace
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
            <param name="data4"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="data3"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.DebugMessage(System.String,System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Debug data logged using Log4Net or Trace
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
            <param name="data4"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="data3"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.WarningMessage(System.String,System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Warn data logged using Log4Net or Trace
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
            <param name="data4"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="data3"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QInfo(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Quick Info logs
            </summary>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QInfoLabel(System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogModelsString(System.String,System.Boolean,System.String,System.Int32,System.Object[])">
            <summary>
                Prints multiple info models.
            </summary>
            <param name="message"></param>
            <param name="isJsonFormat"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="models"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.LogModels(System.String,System.Boolean,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32,System.Object[])">
            <summary>
                Prints multiple info models.
            </summary>
            <param name="message"></param>
            <param name="isJsonFormat"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="models"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.LogModel(System.String,System.Object,System.Boolean,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32)">
            <summary>
                Prints info of single model
            </summary>
            <param name="message"></param>
            <param name="model"></param>
            <param name="isJsonFormat"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogModelWithStateData(System.String,System.Object,System.Boolean,System.String,System.Int32)">
            <summary>
                Get log model of state data.
            </summary>
            <param name="message"></param>
            <param name="model"></param>
            <param name="isJsonFormat"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.LogModelWithStateData(System.String,System.Object,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.Boolean,System.String,System.Int32)">
            <summary>
                Get log model of state data.
            </summary>
            <param name="message"></param>
            <param name="model"></param>
            <param name="isJsonFormat"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.LogModelState(System.String,System.Object,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32)">
            <summary>
                Prints multiple info models.
            </summary>
            <param name="message"></param>
            <param name="model"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.LogModelsWithStatePrinter(System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.String,System.Int32,System.Object[])">
            <summary>
                Prints multiple info models.
            </summary>
            <param name="message"></param>
            <param name="loggerResultType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="models"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogModelsWithStatePrinterString(System.String,System.String,System.Int32,System.Object[])">
            <summary>
                Prints multiple info models.
            </summary>
            <param name="message"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="models"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QInfoLabel(System.String,System.String,System.String,Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="callerStatementInfo"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QDebugLabel(System.String,System.String,System.String,Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="callerStatementInfo"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QWarnLabel(System.String,System.String,System.String,Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="callerStatementInfo"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QErrorLabel(System.String,System.String,System.String,Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="callerStatementInfo"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QFatalLabel(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QErrorLabel(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Quick Info logs with Label
            </summary>
            <param name="label"></param>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QWarn(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Quick warn logs
            </summary>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QDebug(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Quick debug log.
            </summary>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QError(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Quick error log
            </summary>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.QFatal(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Quick Fatal error log
            </summary>
            <param name="data"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetStatementToString(System.Type,System.String,System.Int32)">
            <summary>
                Get Statement Line Info
            </summary>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogString(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="variableName"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogString(System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="variableName"></param>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogStringMessage(System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Gets a compiled log information.
            </summary>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.GetLogStringMessageWithCombineSpaces(System.Type,System.String,System.Int32,System.String[])">
            <summary>
                Gets a compiled log information.
            </summary>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.Error(System.Exception,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Trace error exception
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.ErrorMessage(System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
                Trace error message only
            </summary>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.Warning(System.String,System.String,System.String,System.Type,System.String,System.Int32)">
            <summary>
                Logs warning with variable name
            </summary>
            <param name="variableName"></param>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="currentType"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.Error(System.Type,System.Exception,System.String,System.String,System.String,System.Int32)">
            <summary>
                Log errors using log4net or console or trace
            </summary>
            <param name="currentType"></param>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.Info(System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
                Logs info
            </summary>
            <param name="currentType"></param>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.Warning(System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
                Prints warning
            </summary>
            <param name="currentType"></param>
            <param name="message"></param>
            <param name="additionalInformation"></param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.WriteLog(System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.Boolean,System.Boolean)">
            <summary>
                Write Logs to the specific section by type given <see cref="T:Auk.CsharpBootstrapper.StaticTypes.LoggerResultType" />
            </summary>
            <param name="log"></param>
            <param name="loggerResultType"></param>
            <param name="isTraceMust">
                If this is false then no trace will be made if <see cref="F:Auk.CsharpBootstrapper.Helper.LogHelper._logger" /> is present. Only log will be made with
                Log4net. Or else writes trace must.
            </param>
            <param name="isConsoleMust">
                If false then Write to console if <see cref="F:Auk.CsharpBootstrapper.Helper.LogHelper._logger" /> is null. Or else writes must.
            </param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.CreateDataReceiver(System.String,System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.Boolean,System.Boolean,System.Action{System.String})">
            <summary>
                Create CreateDataReceiver by Wrapping <see cref="M:Auk.CsharpBootstrapper.Helper.LogHelper.WriteLog(System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType,System.Boolean,System.Boolean)" /> method inside.
            </summary>
            <param name="receiverName"></param>
            <param name="log"></param>
            <param name="loggerResultType"></param>
            <param name="action">If any action given then will be executed. If not null then logs will be captured in there.</param>
            <param name="isTraceMust">
                If this is false then no trace will be made if <see cref="F:Auk.CsharpBootstrapper.Helper.LogHelper._logger" /> is present. Only log will be made with
                Log4net. Or else writes trace must.
            </param>
            <param name="isConsoleMust">
                If false then Write to console if <see cref="F:Auk.CsharpBootstrapper.Helper.LogHelper._logger" /> is null. Or else writes must.
            </param>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.WriteTraceLog(System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType)">
            <summary>
                For anything else type write info log by default.
            </summary>
            <param name="log"></param>
            <param name="loggerResultType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.WriteConsoleLog(System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType)">
            <summary>
                For anything else type write info log by default.
            </summary>
            <param name="log"></param>
            <param name="loggerResultType"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.LogHelper.WriteLog4Net(System.String,Auk.CsharpBootstrapper.StaticTypes.LoggerResultType)">
            <summary>
                For anything else type write info log by default.
            </summary>
            <param name="log"></param>
            <param name="loggerResultType"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.ParameterConstraintHelper">
            <summary>
                Constraints create helper.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ParameterConstraintHelper.CreateConstraints(System.Object[],System.String[])">
            <summary>
                Create Constraints based on given <see cref="!:parameters" /> and <see cref="!:parameterNames" /> both needs to be at
                the same length.
            </summary>
            <param name="parameters"></param>
            <param name="parameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetBaseOrAppDirectory">
            <summary>
                AppDomain.CurrentDomain.BaseDirectory
            </summary>
            <returns>returns AppDomain.CurrentDomain.BaseDirectory</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetAppDirectoryRoot">
            <summary>
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), equivalent to %appdata%
            </summary>
            <returns>returns Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetPathFromBase(System.String)">
            <summary>
                returns the absolute path using the relative path from base directory. returns longs paths fixed.
            </summary>
            <returns>returns AppDomain.CurrentDomain.BaseDirectory + relativePath -> long path fixed.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetPathCombineFromBase(System.String[])">
            <summary>
                Combined given paths with <see cref="F:System.IO.Path.DirectorySeparatorChar" />
            </summary>
            <param name="relativePaths"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetPathCombineFromBaseUsingSeparator(System.String,System.String[])">
            <summary>
                Combined given paths with <see cref="!:separator" />
            </summary>
            <param name="separator"></param>
            <param name="relativePaths"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetCombinePathResultFromBaseUsingSeparator(System.String,System.String[])">
            <summary>
                Combined given paths with <see cref="F:System.IO.Path.DirectorySeparatorChar" />
            </summary>
            <param name="separator"></param>
            <param name="relativePaths"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetLongPathFixed(System.String)">
            <summary>
                Return a long path fix if <see cref="!:givenPath" /> is not null and
                <para />
                has greater than 251 length and <see cref="F:Auk.CsharpBootstrapper.Helper.PathHelper.LongPathPrefix" />
                <para />
                is not already added to the path.
            </summary>
            <param name="givenPath"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.ExpandPaths(System.String,System.Object,System.String,System.Int32)">
            <summary>
                AppDomain.CurrentDomain.BaseDirectory
                Changes ~ to deploying directory or running directory.
                Expands environment variables.
                Expand variables reference in path.
            </summary>
            <param name="path">a single path</param>
            <param name="model">if null then only environment variables and telda will be expanded and model will be ignored.</param>
            <returns>returns expended path</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.ExpandPaths(System.String)">
            <summary>
                AppDomain.CurrentDomain.BaseDirectory
                Changes ~ to deploying directory or running directory.
                Expands environment variables.
                Expand variables reference in path.
            </summary>
            <param name="path">a single path. If empty or null then returns as is.</param>
            <returns>returns path by expanding. If empty or null then returns as is.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.ConvertBackSlashToForward(System.String)">
            <summary>
                \ backslash to forward slash /
                \\ double backslash to forward slash /
            </summary>
            <param name="path">a single path. If empty or null then returns as is.</param>
            <returns>returns path by converting. If empty or null then returns as is.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.ConvertForwardSlashToBackward(System.String)">
            <summary>
                \ backslash to forward slash /
                \\ double backslash to forward slash /
            </summary>
            <param name="path">a single path. If empty or null then returns as is.</param>
            <returns>returns path by converting. If empty or null then returns as is.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetFileValidateResult(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Returns validated result of <see cref="T:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult`1" />
            </summary>
            <param name="pathVariableName"></param>
            <param name="path"></param>
            <param name="subSetCannotBe">setting null means it will not be validated.</param>
            <param name="extensionMustBe">setting null means it will not be validated.</param>
            <param name="pathShouldNotBeEqual">setting null means it will not be validated.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetDirectoryValidateResult(System.String,System.String,System.String,System.String)">
            <summary>
                Returns validated result of <see cref="T:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult`1" />
            </summary>
            <param name="pathVariableName"></param>
            <param name="path"></param>
            <param name="subSetCannotBe">setting null means it will not be validated.</param>
            <param name="pathShouldNotBeEqual">setting null means it will not be validated.</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetDirectoryInfo(System.String)">
            <summary>
                Returns validated result of <see cref="T:System.IO.DirectoryInfo" />
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetDirectoryInfoFromFileOrDirectory(System.String,System.IO.FileInfo@)">
            <summary>
                Returns validated result of <see cref="T:System.IO.DirectoryInfo" />
            </summary>
            <param name="path"></param>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.GetDirectoryInfoFromFileOrDirectory(System.String)">
            <summary>
                Returns validated result of <see cref="T:System.IO.DirectoryInfo" />
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.SamePaths(System.String,System.String)">
            <summary>
                Checks whether the two paths are same.
            </summary>
            <returns>True/false.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PathHelper.NormalizePath(System.String)">
            <summary>
                Fix BackSlash with forwarding Slash and trim and starting ending forward slash
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PerformanceCounterHelper.GetProcessorUsage">
            <summary>
                Get used CPU in %
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.PerformanceCounterHelper.GetRamUsage">
            <summary>
                Get Ram in megabytes format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ProcessHelper.CreateProcessForRedirect(System.String,System.String,System.Boolean)">
            <summary>
                Create a process
                UseShellExecute        = false,
                RedirectStandardOutput = true,
                RedirectStandardInput  = true,
                RedirectStandardError  = true,
                CreateNoWindow         = true,
                FileName               = filePath,
                Arguments              = arguments,
                Verb                   = StringHelper.ReturnString(isAdmin, RunasAdmin)
            </summary>
            <param name="filePath"></param>
            <param name="arguments"></param>
            <param name="isAdmin">If true then Verb = "runas"</param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ProcessHelper.BrowseDirectoryInExplorer(System.String)">
            <summary>
                Launches file explorer for given directory path if path exists
            </summary>
            <param name="directoryPath">Directory path</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ProcessHelper.AttachEventLogger(System.Diagnostics.Process,System.String,System.Reflection.Assembly,System.Int32,System.Boolean,System.Boolean,Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessInfoModel,System.Boolean,System.String,System.Int32)">
            <summary>
                Process wait for exit and attach error and info logs.
            </summary>
            <param name="process"></param>
            <param name="processName"></param>
            <param name="currentAssembly"></param>
            <param name="isPrintInfoInXmlFormat"></param>
            <param name="processInfoModel"></param>
            <param name="minutesToTimeProcess">-1 means no Time, if has number > 0 then will be converted to milliseconds</param>
            <param name="isPrintProcessInfoOnEveryMessage"></param>
            <param name="isMessageOnEndingPart">If True then prints log on the ending of the process.</param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
            <returns>Returns exit code at the end. If -1 then issue.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ProcessHelper.AttachEventLogger(System.Diagnostics.Process,Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler,System.Int32,System.Boolean)">
            <summary>
                Process wait for exit and attach error and info logs.
            </summary>
            <param name="process"></param>
            <param name="processBothDataReceiveEventHandler"></param>
            <param name="minutesToTimeProcess">-1 means no Time, if has number > 0 then will be converted to milliseconds</param>
            <param name="isMessageOnEndingPart"></param>
            <returns>Returns exit code at the end. If -1 then issue.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ProcessHelper.AttachEventLogger(System.Diagnostics.Process,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)">
            <summary>
                Process wait for exit and attach error and info logs.
            </summary>
            <param name="process"></param>
            <param name="standardOutputEvent"></param>
            <param name="standardErrorOutputEvent"></param>
            <returns>Returns exit code at the end. If -1 then issue.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.ProcessHelper.IsCurrentProcessRunningAlready">
            <summary>
                Returns a System.Diagnostics.Process pointing to
                a pre-existing process with the same name as the
                current one, if any; or null if the current process
                is unique.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper">
            <summary>
                Helps to handle large collection of data in partition.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.GetPagesCount(System.Int32,System.Int32)">
            <summary>
                If type is not null and the page number has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="totalCount"></param>
            <param name="perPageItems"></param>
            <returns>Returns the possible page numbers</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.GetPagedSequencedItems``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
                If type is not null and the page number has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="list"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <param name="isIgnoreNullItem"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.GetPagedSequencedItems``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
                If type is not null and the page number has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="list"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <param name="isIgnoreNullItem"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.GetPagedSequencedItems``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
                If type is not null and the page number has items then it will return as list.
                Otherwise null returns.
            </summary>
            <param name="list"></param>
            <param name="pageNumber"></param>
            <param name="perPageItems"></param>
            <param name="isIgnoreNullItem"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.RunActionsBasedOnPaging``1(``0[],System.Action{``0},System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Run a single action against the collection items by dividing the collection into multiple pages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action">Single action to run against single item of the given <see cref="!:collection" /></param>
            <param name="itemsPerPage">Based on how many items pages are partitioned.</param>
            <param name="parallelPageRuns">How many threads are going to run for all the pages.</param>
            <param name="parallelSingleItemRunsInInnerPage">Inside a single page, how many threads should process the inner items.</param>
            <param name="cancellationToken">Cancellation token to cancel the running task.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.RunActionsBasedOnPaging``1(System.Collections.Generic.IList{``0},System.Action{``0},System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Run a single action against the collection items by dividing the collection into multiple pages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action">Single action to run against single item of the given <see cref="!:collection" /></param>
            <param name="itemsPerPage">Based on how many items pages are partitioned.</param>
            <param name="parallelPageRuns">How many threads are going to run for all the pages.</param>
            <param name="parallelSingleItemRunsInInnerPage">Inside a single page, how many threads should process the inner items.</param>
            <param name="cancellationToken">Cancellation token to cancel the running task.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.RunActionsBasedOnPaging``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{``0},System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Run a single action against the collection items by dividing the collection into multiple pages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action">Single action to run against single item of the given <see cref="!:collection" /></param>
            <param name="itemsPerPage">Based on how many items pages are partitioned.</param>
            <param name="parallelPageRuns">How many threads are going to run for all the pages.</param>
            <param name="parallelSingleItemRunsInInnerPage">Inside a single page, how many threads should process the inner items.</param>
            <param name="cancellationToken">Cancellation token to cancel the running task.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.RunInSequence``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)">
            <summary>
                Returns false means occured error.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.RunActionsMaxParallel``1(System.Collections.Generic.IList{``0},System.Action{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Run a single action against the collection items by dividing the collection into multiple pages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action">Single action to run against single item of the given <see cref="!:collection" /></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.SequenceAnalysisHelper.RunActionsMaxParallel``1(``0[],System.Action{``0},System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Run a single action against the collection items by dividing the collection into multiple pages.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="action">Single action to run against single item of the given <see cref="!:collection" /></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.StringHelper">
            <summary>
                Helps with string functions.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.WrapWithDoubleQuotes(System.String)">
            <summary>
                Output as double quoted
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.CreateCsharpInterfaceAndClassCode``1(``0,System.Boolean)">
            <summary>
                Output as double quoted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.CreateCsharpSummaryXml(System.String)">
            <summary>
                Output as double quoted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.WrapWith(System.String,System.String)">
            <summary>
                Output as given start and end
            </summary>
            <param name="stringValue"></param>
            <param name="wrapperStartEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.WrapWith(System.String,System.String,System.String)">
            <summary>
                Output as given start and end
            </summary>
            <param name="stringValue"></param>
            <param name="wrapperStart"></param>
            <param name="wrapperEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.UnwrapWithSingleAndDoubleQuotes(System.String)">
            <summary>
                Omit Single and Double Quote if has Any at the end and beginning
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Auk.CsharpBootstrapper.Helper.StringHelper.WrapWithNewLine(System.String,System.Boolean,System.Boolean)" -->
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.UnwrapStartingQuotes(System.String)">
            <summary>
                Omit Single and Double Quote if has Any at the end and beginning
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.UnwrapWithQuotes(System.String,System.String)">
            <summary>
                Omit Double Quote if has Any at the end and beginning
            </summary>
            <param name="stringValue"></param>
            <param name="quote"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetTheOtherQuote(System.String)">
            <summary>
                If any single quote given then double returns and vice versa.
                if doesn't match then returns as it is.
            </summary>
            <param name="quote"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetRightBracket(System.String)">
            <summary>
                If any single bracket(parentThesis, CurlyBrace, angle, square brackets) given then ending ones only
                if doesn't match then returns as it is.
            </summary>
            <param name="leftBracket"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetRightBracket(System.Char)">
            <summary>
                If any single bracket(parentThesis, CurlyBrace, angle, square brackets) given then ending ones only
                if doesn't match then returns as it is.
            </summary>
            <param name="leftBracket"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.ToStringXmlParameter(System.Object,System.Boolean,System.String,System.String[])">
            <summary>
                Create Xml Parameter string format for given type public properties.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.Create(System.Boolean,System.String,System.String[])">
            <summary>
                Create String Based on Condition
                Return empty string if <see cref="!:condition" /> didn't meet.
            </summary>
            <param name="condition"></param>
            <param name="joiner"></param>
            <param name="stringParameters"></param>
            <returns>string if condition is true or else returns a combine string of given parameters.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.Create(System.Boolean,System.String,System.Func{System.String,System.Boolean},System.String[])">
            <summary>
                Create String Based on Condition
                Return empty string if <see cref="!:condition" /> didn't meet.
            </summary>
            <param name="condition"></param>
            <param name="joiner"></param>
            <param name="predicate">Filter using the predicate</param>
            <param name="stringParameters"></param>
            <returns>string if condition is true or else returns a combine string of given parameters.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.CreateNonNull(System.Boolean,System.String,System.String[])">
            <summary>
                Create String Based on Condition
                Return empty string if <see cref="!:condition" /> didn't meet.
            </summary>
            <param name="condition"></param>
            <param name="joiner"></param>
            <param name="stringParameters"></param>
            <returns>string if condition is true or else returns a combine string of given parameters.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.ReturnString(System.Boolean,System.String,System.String)">
            <summary>
                Create String Based on Condition
                Return empty string if <see cref="!:condition" /> didn't meet.
            </summary>
            <param name="condition"></param>
            <returns>string if condition is true or else returns a combine string of given parameters.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.CreateNonEmpty(System.Boolean,System.String,System.String[])">
            <summary>
                Create String Based on Condition
                Return empty string if <see cref="!:condition" /> didn't meet.
            </summary>
            <param name="condition"></param>
            <param name="joiner"></param>
            <param name="stringParameters"></param>
            <returns>string if condition is true or else returns a combine string of given parameters.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSubStringFromFirst(System.String,System.String,System.Boolean)">
            <summary>
                Returns the substring after finding the text from the last.
                Depending on the <see cref="!:afterPart" /> flag returns either before part or after part.
                If given string is null then return empty string.
            </summary>
            <param name="sourceString"></param>
            <param name="findFromFirst"></param>
            <param name="afterPart"></param>
            <returns>If not found then returns empty string or null if index is out of boundary.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSubStringFromStartingFrom(System.String,System.Int32,System.String,System.StringComparison,System.Boolean)">
            <summary>
                Returns the substring after finding the text from the last.
                Depending on the <see cref="!:afterPart" /> flag returns either before part or after part.
                If given string is null then return empty string.
            </summary>
            <param name="sourceString"></param>
            <param name="startIndexForSearching"></param>
            <param name="findFromFirst"></param>
            <param name="stringComparison"></param>
            <param name="afterPart"></param>
            <returns>If not found then returns empty string or null if index is out of boundary.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSafeIndexFromFirst(System.String,System.Int32,System.String,System.StringComparison)">
            <summary>
                Returns the found index from first . If <see cref="!:sourceString" /> is null then returns -1;
            </summary>
            <param name="sourceString"></param>
            <param name="startIndexForSearching"></param>
            <param name="findFromFirst"></param>
            <param name="stringComparison"></param>
            <returns>Returns the found index from first . If <see cref="!:sourceString" /> is null then returns -1;</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSafeIndexFromLast(System.String,System.Int32,System.String,System.StringComparison)">
            <summary>
                Returns the found index from first . If <see cref="!:sourceString" /> is null then returns -1;
            </summary>
            <param name="sourceString"></param>
            <param name="startIndexForSearching"></param>
            <param name="findFromLast"></param>
            <param name="stringComparison"></param>
            <returns>Returns the found index from first . If <see cref="!:sourceString" /> is null then returns -1;</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSubStringUsingFoundIndex(System.String,System.Int32,System.Boolean)">
            <summary>
                Get substring from found index given.
                If <see cref="!:stringFoundIndex" /> is less then 0 or equals to -1 then returns empty string.
                <see cref="!:afterPart" /> decides before part or after part to return.
            </summary>
            <param name="sourceString"></param>
            <param name="stringFoundIndex"></param>
            <param name="afterPart"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSubStringFromLast(System.String,System.Int32,System.String,System.StringComparison,System.Boolean)">
            <summary>
                Returns the substring after finding the text from the last.
                Depending on the <see cref="!:afterPart" /> flag returns either before part or after part.
                If given string is null then return empty string.
            </summary>
            <param name="sourceString"></param>
            <param name="stringComparison"></param>
            <param name="afterPart"></param>
            <param name="startIndexForSearching"></param>
            <param name="findFromLast"></param>
            <returns>If not found then returns empty string or null if index is out of boundary.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.GetSubStringFromLast(System.String,System.String,System.Boolean)">
            <summary>
                Returns the substring after finding the text from the last.
                Depending on the <see cref="!:afterPart" /> flag returns either before part or after part.
                If given string is null then return empty string.
            </summary>
            <param name="sourceString"></param>
            <param name="findFromLast"></param>
            <param name="afterPart"></param>
            <returns>If not found then returns empty string or null if index is out of boundary.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.StringHelper.WrapWithSingleQuotes(System.String)">
            <summary>
                Wrap with single quote , output of '<see cref="!:stringValue" />'
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Helper.TemplateHelper">
            <summary>
                Helps to create template and get string values
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TemplateHelper.Create(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Default Char = '@'
            </summary>
            <param name="templatePath"></param>
            <param name="tuples"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TestMethodAnalyzer.GetTextInside(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Returns empty string upon not found.
            </summary>
            <param name="source"></param>
            <param name="startSymbol"></param>
            <param name="endingSymbol">If not found then returns up to the end of the source string.</param>
            <returns>Return empty string if source is null or empty.</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TestMethodAnalyzer.GetArgumentsInsideTestCase(System.String)">
            <summary>
                Returns inside of Test Case
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TestMethodAnalyzer.GetClassNameFromFullyQuantifiedName(System.String,System.String@)">
            <summary>
                Extracts definition and namespace from the fullyQuantified Name
                XY.IO.WWW.ClassTests
                XY.IO.WWW = Namesapce
                ClassTests = className
            </summary>
            <param name="definitionFullyQuantifiedName"></param>
            <param name="definitionNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.ReduceSystemNamespace(System.String)">
            <summary>
                Reduce or remove System. from the <see cref="!:typeGiven" />
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsCompilerGeneratedType(System.Type)">
            <summary>
                Returns true if type name contains less than symbol at the beginning or has custom attribute
                <see cref="F:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.CompilerGeneratedAttributeFullname" />
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsCompilerGeneratedMemberInfo(System.Reflection.MemberInfo)">
            <summary>
                Returns true if type name contains less than symbol at the beginning or has custom attribute
                <see cref="F:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.CompilerGeneratedAttributeFullname" />
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsGeneratedGetMethod(System.Reflection.MemberInfo)">
            <summary>
                Returns true if contains get method start name <see cref="!:CommonConstants.GetMethodStart" />
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsGeneratedSetMethod(System.Reflection.MemberInfo)">
            <summary>
                Returns true if contains get method start name <see cref="!:CommonConstants.SetMethodStart" />
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsGeneratedGetSetMethod(System.Reflection.MemberInfo)">
            <summary>
                Returns true if contains get method start name <see cref="!:CommonConstants.GetMethodStart" /> or
                <see cref="!:CommonConstants.SetMethodStart" />
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.ReduceSystemCollectionNamespace(System.String)">
            <summary>
                Reduce or remove common namespaces from the list <see cref="F:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.CommonReduceNamespaces" />
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsInvalidType(System.String)">
            <summary>
                Returns true if given <see cref="!:typeGiven" /> is <see cref="M:System.String.IsNullOrWhiteSpace(System.String)" /> or
                <see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.QuestionMark" />
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsString(System.String)">
            <summary>
                Returns true if <see cref="T:System.String" /> or <see cref="T:System.String" /> or <see cref="T:System.String" /> passed
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsInt(System.String)">
            <summary>
                Returns true if <see cref="T:System.Int32" /> or <see cref="T:System.Int32" /> or <see cref="T:System.Int32" /> passed
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeCheckingHelper.IsLong(System.String)">
            <summary>
                Returns true if <see cref="T:System.Int64" /> or <see cref="T:System.Int64" /> or <see cref="T:System.Int64" /> passed
            </summary>
            <param name="typeGiven"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeHelper.GetTypeByPaths(System.String,System.Reflection.Assembly)">
            <summary>
                Get types by visiting different paths.
                First try to execute <see cref="M:System.Type.GetType" /> to get the type.
                If not available then try given possible assembly.
                If not then try to find the references of the current assembly.
            </summary>
            <param name="fullyQuantifiedName"></param>
            <param name="possibleAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Helper.TypeHelper.CreateLiteralType(System.Type,System.String)">
            <summary>
                Create any literal type (reserved types only + enums) with expected value of that type.
                It cannot create class or any different or complex or list or array types.
                type.IsArray.ShouldBeFalse();
            </summary>
            <param name="type"></param>
            <param name="expectedValue"></param>
            <returns></returns>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.BackingFieldInfo.PropertyInfo">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.BackingFieldInfo.PropertyName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.BackingFieldInfo.ActualFieldName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.BackingFieldInfo.IsBackingField">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.BackingFieldInfo.InstanceComponent">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.BackingFieldInfo.FieldInfo">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo">
            <summary>
                Call statement line info
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.#ctor(System.Type,System.Boolean,System.String,System.Int32)">
            <summary>
                Caller statement info
            </summary>
            <param name="type"></param>
            <param name="isFullInfo"></param>
            <param name="callerFileName"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
                Caller statement info
            </summary>
            <param name="type"></param>
            <param name="isFullInfo"></param>
            <param name="callerFileName"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.CallerFileName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.CallerLineNumber">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.Type">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.IsFullInfo">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CallerStatementInfo.GetLineInfo">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.#ctor">
            <summary>
                By Default Async True and isKeepCacheList = false.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="defaultDictionaryCapacity"></param>
            <param name="defaultListCapacity"></param>
            <param name="isKeepCacheList"></param>
            <param name="isAsync">If true then creates Concurrent Dictionary or else Creates regular Dictionary</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Count">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Add(`0,System.Collections.Generic.IList{`1})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Values">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.TotalValuesCount">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.IsAsync">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.DefaultListCapacity">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Add(`0,`1,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.Item(`0,System.Func{`1,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.GetFilteredValues(System.Func{`1,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.GetFilteredValues(`0,System.Func{`1,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.SaveToFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.SaveToFileUsingMutex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.LoadFromFileUsingMutex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.DictionaryList`2.LoadFromFile(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3">
            <summary>
                GenericConverterCollection is useful when data needs to be converted from TDataInDifferentForm to TData
                Plus use a collection at the same time.
            </summary>
            <typeparam name="TKey1">Key</typeparam>
            <typeparam name="TData">Data</typeparam>
            <typeparam name="TKey2"></typeparam>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Collection">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.SimpleCollection">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Keys">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Values">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Item(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Count">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Filter(System.Func{`2,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.FilterAsValueLinkedList(System.Func{`2,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.ApplyCommonValidationCheck">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.FilterAsValueList(System.Func{`2,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.FilterOnList(System.Func{`2,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Set(`0,`1,`2)">
            <summary>
                Adding or updating collection by the given generic form data to collection by converting it.
            </summary>
            <param name="key1"></param>
            <param name="methodNameAsKey2"></param>
            <param name="dataInForm">Data in the same form as collection is expecting</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Get(`0)">
            <summary>
                Returns data if present, doesn't throw exception if not present.
                Returns null if not present.
            </summary>
            <param name="key">Give key1 to get the data.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Get(`0,`1)">
            <summary>
                Returns data if present, doesn't throw exception if not present.
                Returns null if not present.
            </summary>
            <param name="key1">Give key1 to get the data.</param>
            <param name="key2"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Remove(`0)">
            <summary>
                Returns true if successfully removed.
            </summary>
            <param name="key">Give key1 to get the data.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Remove(`0,`1)">
            <summary>
                Remove the sub item.
                Returns true if successfully removed.
            </summary>
            <param name="key1">Give key1 to get the data.</param>
            <param name="key2"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericCollectionOfCollection`3.Finalize">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.Collection.GenericConverterCollection`4">
            <summary>
                GenericConverterCollection is useful when data needs to be converted from TDataInDifferentForm to TData
                Plus use a collection at the same time.
            </summary>
            <typeparam name="TKey1">Key</typeparam>
            <typeparam name="TData">Data</typeparam>
            <typeparam name="TDataInDifferentForm">Data in different form and will be converted into TData types.</typeparam>
            <typeparam name="TKey2"></typeparam>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Collection.GenericConverterCollection`4.Item(`0,`1,`2)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericConverterCollection`4.GetConvertedData(`2,System.Object[])">
            <summary>
                Generic given data will be extracted to this dictionary based on logic
            </summary>
            <param name="dataInDifferentForm"></param>
            <param name="dynamicParameters"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Collection.GenericConverterCollection`4.Set(`0,`1,`2,System.Object[])">
            <summary>
                Adding or updating collection by the given generic form data to collection by converting it.
            </summary>
            <param name="key1">Data</param>
            <param name="methodNameAsKey2"></param>
            <param name="genericData"></param>
            <param name="dynamicParameters"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.Collection.ThreadSafeList`1">
            <summary>
                Thread-safe implementation for <see cref="T:System.Collections.Generic.IList`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
                The implementation is taken from
                <see cref="!:http://bit.ly/31KuASY" />
            </remarks>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic">
            <summary>
                Binary formatter Saving and reading
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.SaveToFile``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.SaveToFileUsingMutex``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.SaveToFileBinder``1(``0,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.SaveToFileBinderUsingMutex``1(``0,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.StopForceBindingForSave">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.GetRawDataFromFile(System.String)">
            <summary>
                <inheritdoc />
                it returns binary data.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.GetRawDataFromFileUsingMutex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.GetDataFromFileUsingMutex``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.BinaryPersistentLogic.GetDataFromFile``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic">
            <summary>
                Json Saving and reading
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.SaveToFile``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.SaveToFileUsingMutex``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.SaveToFileBinder``1(``0,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.SaveToFileBinderUsingMutex``1(``0,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.StopForceBindingForSave">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.GetRawDataFromFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.GetRawDataFromFileUsingMutex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.GetDataFromFileUsingMutex``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonStandalonePersistentLogic.GetDataFromFile``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1">
            <summary>
                Json Saving and reading
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.SaveToFile(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.SaveToFileUsingMutex(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.SaveToFileBinder(`0,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.SaveToFileBinderUsingMutex(`0,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.StopForceBindingForSave">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.GetDataFromFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.PersistentLogic.JsonPersistentLogic`1.GetDataFromFileUsingMutex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess">
            <summary>
                Helps to create Powershell or batch runner service.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Create the simple Powershell service creator for powershell and batch files.
            </summary>
            <param name="isUseShell"></param>
            <param name="isCreateWindow"></param>
            <param name="isRedirectOutputs"></param>
            <param name="isAdmin"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.RunScript(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.StartPowershellProcess(System.String,System.String)">
            <summary>
                Instantiates new process to run the powershell script
            </summary>
            <param name="filePath"></param>
            <param name="arguments">string containing arguments for target script</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.SetBaseArgument">
            <summary>
                Sets base arguments for script execution
            </summary>
            <returns>string representing base execution arguments</returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.CreatePowerShellProcess(System.String,System.String,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.CreatePowerShellProcess(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.CreateBatchFileProcess(System.String,System.String,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.CreateBatchFileProcess(System.String,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.StartSignedPowerShell">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.UnblockFileBeforeRunning(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ExternalApplication.SimplePowershellRunnerServiceWithProcess.CreateBatchCodeProcess(System.String,System.Boolean,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.InstanceComponent">
            <summary>
                Instance wrapper.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.InstanceComponent.#ctor(System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Initialize the component for given <see cref="!:instanceType" />
            </summary>
            <param name="instanceType"></param>
            <param name="instance"></param>
            <param name="isSetupAll">Setup and collect all </param>
            <param name="initializeInheritedMembers"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.InstanceComponent.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
                Initialize the component for given <see cref="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.CurrentInstanceType" />
            </summary>
            <param name="instance"></param>
            <param name="isSetupAll">Setup and collect all </param>
            <param name="initializeInheritedMembers">
                if true then all inherited members will be added to the fields, properties and
                methods
            </param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.InstanceComponent.Setup(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Setup fields, properties and methodinfo based on bool values.
            </summary>
            <param name="isSetupFields"></param>
            <param name="isSetupProperties"></param>
            <param name="isSetupMethods"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.AssemblyFullyQuantifiedName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.CurrentAssembly">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.CurrentInstanceType">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.CurrentInstance">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.Fixture">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.AllFieldInfos">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.AllBackingFieldInfos">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.AllMethodInfos">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.AllPropertyInfos">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.IsStatic">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.IsAbstract">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.IsSealed">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.InstanceComponent.IsInstanceNull">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.InstanceComponent.GetInstance``1">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.AddLazyPossibility(Auk.CsharpBootstrapper.Interfaces.ILazyGetter{`0})">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.GetPossibilities">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.IsContains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.Has(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.Has(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.HasIf(System.Func{System.Boolean},`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.NotExist(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.NotExist(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.HasIf(System.Func{System.Boolean},`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetterCollection`1.Finalize">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.LazyGetter`1">
            <inheritdoc />
        </member>
        <member name="F:Auk.CsharpBootstrapper.Implementations.LazyGetter`1._lockRestrictOneTimeLockCondition">
            <summary>
                If it is not null then if this condition is true then only lock
                <para></para>
                will happen in <see cref="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ValueAtOnceWithLock" /> or <see cref="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.InvokeActionAtOnceLock" />
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.LockKey">
            <summary>
                Lock key a new GUID string.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.#ctor(System.Func{`0},System.String,System.Func{System.Boolean},System.String,System.Int32)">
            <summary>
                Create a lazy getter
            </summary>
            <param name="injectedLogic"></param>
            <param name="functionName"></param>
            <param name="lockRestrictOneTimeLockCondition">If condition given then </param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.#ctor(System.Func{System.Boolean},System.Func{`0},System.String,System.Func{System.Boolean},System.String,System.Int32)">
            <summary>
                Create a lazy getter
            </summary>
            <param name="conditionalIf"></param>
            <param name="injectedLogic"></param>
            <param name="functionName"></param>
            <param name="lockRestrictOneTimeLockCondition">
                If Condition given then condition.Invoke() true then lock will only apply when asked
                <see cref="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ValueAtOnceWithLock" /> or
                <see cref="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.InvokeActionAtOnceLock" /> .
                If null then lock will apply regardless when asked <see cref="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ValueAtOnceWithLock" /> or
                <see cref="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.InvokeActionAtOnceLock" /> .
            </param>
            <param name="callerFilePath"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ValueAtOnce">
            <inheritdoc />
            <exception cref="T:System.Exception" accessor="get">A delegate callback throws an exception.</exception>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.IsOneTimeResultExecuted">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.IsOneTimeValuePresent">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ValueAtOnceWithLock">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.InvokeActionAtOnce">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.InvokeActionAtOnceLock">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ResetOneTimeValue">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.AttachRecallActionEvent(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.ForceStopAttachedEvent">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.RunOnceOnSeparateThread">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.LazyGetter`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoStart(System.Type,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoDuration``2(System.Type,System.String,System.Action,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoEnd(System.Type,System.String,System.TimeSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoEnd(System.Type,System.String,System.DateTime,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoWithDuration(System.Type,System.String,System.Action,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoDuration``1(System.Type,System.String,System.Action{``0},``0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InfoDuration``2(System.Type,System.String,System.Action{``0,``1},``0,``1,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.PathError(System.Type,System.String,System.Exception,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.Logger">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.InitializeLog4Net(log4net.ILog)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.Logger.BaseLogger.ConfigureLog4Net(System.Reflection.Assembly,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessBothDataReceiveEventHandler.#ctor(Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessInfoModel,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32,System.String,System.Int32)">
            <summary>
                Create ProcessDataReceiveEventHandler
            </summary>
            <param name="processInfoModel"></param>
            <param name="isPrintProcessInfoOnEveryMessage">
                If true then every message print will caller statement info.
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo" />
            </param>
            <param name="stringLengthMustBeGreaterThanForPrintingMessage"></param>
            <param name="isFullInfo"></param>
            <param name="isErrorHandler"></param>
            <param name="defaultMessageDisplayDelayInSeconds">
                Only provide seconds here. Converts seconds to milliseconds. Given
                number is multiplied by 1000
            </param>
            <param name="callerFileName"></param>
            <param name="callerLineNumber"></param>
            <param name="isPrintInfoInXmlFormat">If true then print in xml format.</param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessBothDataReceiveEventHandler.StandardDataReceiver">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessBothDataReceiveEventHandler.ErrorDataReceiver">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessBothDataReceiveEventHandler.StartMessageDumping">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessBothDataReceiveEventHandler.ForceStopMessageDumping">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessBothDataReceiveEventHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler">
            <summary>
                Default Data Receiver Handler
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler._skippedPrintingIndex">
            <summary>
                Marker for skipped printing for how many times based on <see cref="F:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler._currentStringsLength" /> is not matching with
                <see cref="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.StringLengthMustBeGreaterThanForPrintingMessage" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.#ctor(Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessInfoModel,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Int32,System.String,System.Int32)">
            <summary>
                Create ProcessDataReceiveEventHandler
            </summary>
            <param name="processInfoModel"></param>
            <param name="isPrintProcessInfoOnEveryMessage">
                If true then every message print will caller statement info.
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo" />
            </param>
            <param name="stringLengthMustBeGreaterThanForPrintingMessage"></param>
            <param name="isFullInfo"></param>
            <param name="isErrorHandler"></param>
            <param name="defaultMessageDisplayDelayInSeconds">
                Only provide seconds here. Converts seconds to milliseconds. Given
                number is multiplied by 1000
            </param>
            <param name="callerFileName"></param>
            <param name="callerLineNumber"></param>
            <param name="isPrintInfoInXmlFormat">If true then print in xml format.</param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.ProcessInfoModel">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.IsErrorHandler">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.IsPrintProcessInfoOnEveryMessage">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.StringLengthMustBeGreaterThanForPrintingMessage">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.IsMessageDumpEnabled">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.IsPrintInfoInXmlFormat">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.CallerStatementInfo">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.ForceStopMessageDumpingUsingThread">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.GetDefaultHandler">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessDataReceiveEventHandler.StartMessageDumpingUsingThread">
            <summary>
                Starts message dumping using thread, thread will go to sleep based on the defined delay in constructor
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel">
            <summary>
                Process information
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.#ctor(System.Diagnostics.Process,System.String,System.Reflection.Assembly)">
            <summary>
                Creates a ProcessInfoModel from <see cref="T:System.Diagnostics.Process" /> and given assembly used as
                <see cref="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ParentProcessInfoModel" />
            </summary>
            <param name="process"></param>
            <param name="aliasName"></param>
            <param name="currentAssembly"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.Id">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ProcessName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ProcessFileLocation">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ProcessArguments">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.AliasName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ToXmlStarter">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.HasParentProcess">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ToArgumentsString">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.GetMessagesWithXmlWrapper(System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.GetMessagesWithWrapper(System.Boolean,System.String[])">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ProcessEventInfo.ProcessInfoModel.ParentProcessInfoModel">
            <inheritdoc />
        </member>
        <member name="F:Auk.CsharpBootstrapper.Implementations.ActionRunner.LockKey">
            <summary>
                Lock key a new GUID string.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.RunAction">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.RunAtOnce">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.RunAtOnceWithLock">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.AttachRecallActionEvent(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.ForceStopAttachedEvent">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ActionRunner.RunOnceOnSeparateThread">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties">
            <summary>
                Cache common properties data.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.#ctor(System.Int32)">
            <summary>
                If File path given then load from file or else create default dictionaries.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.CommonDictionary">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.StateChangesDictionaryList">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.KeyTypeDictionary">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.HasKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.Set(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.GetDynamic(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.CommonProperties.CommonCacheProperties.ToString">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1">
            <summary>
                Common validate result.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.#ctor">
            <summary>
                Invalid result initialization
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.#ctor(System.Boolean)">
            <summary>
                Initialize with resulting type.
            </summary>
            <param name="isValid"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.#ctor(System.Boolean,`0)">
            <summary>
                Initialize with resulting type and result
            </summary>
            <param name="isValid"></param>
            <param name="result"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.#ctor(System.String,System.Boolean)">
            <summary>
                Initialize with resulting type and result
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.#ctor(System.Boolean,`0,System.String)">
            <summary>
                Initialize with everything.
            </summary>
            <param name="isValid"></param>
            <param name="result"></param>
            <param name="log"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.IsValid">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.Result">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.Log">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.SetValidResult(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.SetInvalidResult(`0)">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.CommonValidateResult`1.SetResult(System.Boolean,`0)">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1">
            <summary>
                Any method result wrapper, act as lazy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.#ctor(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Object)">
            <summary>
                Any method result wrapper, act as lazy
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="instanceOfClass"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.#ctor(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,System.String,System.Object[],System.Type[],System.Object)">
            <summary>
                Any method result wrapper, act as lazy
            </summary>
            <param name="instanceComponent"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <param name="parameterTypes"></param>
            <param name="instanceOfClass"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.#ctor(Auk.CsharpBootstrapper.Interfaces.IInstanceComponent,Auk.CsharpBootstrapper.Interfaces.Model.IMethodInfoWrapperModel,System.Object[],System.Object)">
            <summary>
                Any method result wrapper, act as lazy
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.ValueResult">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.MethodInfo">
            <summary>
                <inheritdoc />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.WorkingAction">
            <summary>
                Action which will generate the result.
                <inheritdoc />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.Parameters">
            <summary>
                Available parameters in the <see cref="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.MethodInfo" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.InstanceOfClass">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.InstanceComponent">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Implementations.ResultWrapper.ResultModelWrapper`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2">
            <summary>
                Create Dictionary TKey, Value as IList{TValue}
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.TotalValuesCount">
            <summary>
                Total values count
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.IsAsync">
            <summary>
                If async true then creates <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.DefaultListCapacity">
            <summary>
                Default List creation capacity.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.Add(`0,`1,System.Int32,System.Boolean)">
            <summary>
                Add single item to the Dictionary List.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="capacity"></param>
            <param name="isLockDuringListAdd"></param>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.Item(`0,System.Func{`1,System.Boolean})">
            <summary>
                Get the filtered value filter and returns.
                If not found then return empty array of the type.
            </summary>
            <param name="key"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.GetFilteredValues(System.Func{`1,System.Boolean})">
            <summary>
                Get Filtered data.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.GetFilteredValues(`0,System.Func{`1,System.Boolean})">
            <summary>
                Get Filtered data from the given key.
                If nothing found then return empty array of type <see cref="!:TValue" />
            </summary>
            <param name="key"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.SaveToFile(System.String)">
            <summary>
                Save to file. Returns true if operation is successful.
            </summary>
            <param name="absolutePath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.SaveToFileUsingMutex(System.String)">
            <summary>
                Save to file using mutex. Returns true if operation is successful.
            </summary>
            <param name="absolutePath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.LoadFromFileUsingMutex(System.String)">
            <summary>
                Load to file using mutex. Returns true if operation is successful.
            </summary>
            <param name="absolutePath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IDictionaryList`2.LoadFromFile(System.String)">
            <summary>
                Load to file without mutex. Returns true if operation is successful.
            </summary>
            <param name="absolutePath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericCollectionOfCollection`3.Set(`0,`1,`2)">
            <summary>
                Adding or updating collection by the given generic form data to collection by converting it.
            </summary>
            <param name="key1"></param>
            <param name="methodNameAsKey2"></param>
            <param name="dataInForm">Data in the same form as collection is expecting</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericCollectionOfCollection`3.Get(`0)">
            <summary>
                Returns data if present, doesn't throw exception if not present.
                Returns null if not present.
            </summary>
            <param name="key">Give key1 to get the data.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericCollectionOfCollection`3.Get(`0,`1)">
            <summary>
                Returns data if present, doesn't throw exception if not present.
                Returns null if not present.
            </summary>
            <param name="key1">Give key1 to get the data.</param>
            <param name="key2"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericCollectionOfCollection`3.Remove(`0)">
            <summary>
                Returns true if successfully removed.
            </summary>
            <param name="key">Give key1 to get the data.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericCollectionOfCollection`3.Remove(`0,`1)">
            <summary>
                Remove the sub item.
                Returns true if successfully removed.
            </summary>
            <param name="key1">Give key1 to get the data.</param>
            <param name="key2"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericConverterCollection`4">
            <summary>
                A generic converter collection, where takes data in one form and converts and keeps in other form.
            </summary>
            <typeparam name="TKey1">First Key type</typeparam>
            <typeparam name="TKey2">Second key type</typeparam>
            <typeparam name="TData">Final Data type.</typeparam>
            <typeparam name="TDataInDifferentForm">Data in another form and will be converted to <see cref="!:TData" /> form.</typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericConverterCollection`4.GetConvertedData(`2,System.Object[])">
            <summary>
                Generic given data will be extracted to this dictionary based on logic
            </summary>
            <param name="dataInDifferentForm"></param>
            <param name="dynamicParameters"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Collection.IGenericConverterCollection`4.Set(`0,`1,`2,System.Object[])">
            <summary>
                Adding or updating collection by the given generic form data to collection by converting it.
            </summary>
            <param name="key1">Data</param>
            <param name="methodNameAsKey2"></param>
            <param name="genericData"></param>
            <param name="dynamicParameters"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test">
            <summary>
                Unit test base interface v1.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test.RecursionLevel">
            <summary>
                Default recursion level for fixture.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test.TestIgnoreModelsDictionary">
            <summary>
                Keeps track of ignoring test, where key is member name.
                Added method
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV1Test.ClassMembersDictionary">
            <summary>
                Keeps track of the found class members, should be populated in the setup time.
                All the class member name collection
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV2Test.OneTimeSetup">
            <summary>
                Base class one time method.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test">
            <summary>
                Base interface test class
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.CustomConstructorModels">
            <summary>
                All the constructors
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.GenericArgumentTypes">
            <summary>
                Current class's generic arguments types
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseSetupV3Test.TypesDictionary">
            <summary>
                Types dictionary
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup">
            <summary>
                Base interface for unit test class.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.ShimContext">
            <summary>
                Shims context
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.DisposeShimContext">
            <summary>
                Disposes <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.ShimContext" />.<see cref="M:System.IDisposable.Dispose" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.DisposableItems">
            <summary>
                Items those are disposable.
                Only added ones will be disposed at the tear down event.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.StringChangeTracker">
            <summary>
                Keeps the track of the string changes.
                Sets to <see cref="!:EmptyString" /> every time before running the tests.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.SetupBeforeInstanceCreate">
            <summary>
                Gets called before creating the target class instance
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.SetupCommonArrange">
            <summary>
                Setup common things for the test.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.Setup">
            <summary>
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.CleanUp">
            <summary>
                Should be marked with [TearDown] attribute, will execute for every unit test method ends.
                Single Unit Test TearDown or clean up after unit test execution.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.FinalCleanup">
            <summary>
                Tear down items when tests are finalized.
                Disposes <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.ShimContext" /> and all the <see cref="P:Auk.CsharpBootstrapper.Interfaces.BaseSetup.IBaseUnitTestSetup.DisposableItems" />
                Use [OneTimeTearDown] attribute. Clean up after all unit test execution.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1">
            <summary>
                Generic Persistent Saving Logic
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.SaveToFile(`0,System.String)">
            <summary>
                Save the current Config to file.
            </summary>
            <param name="absoluteFilePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.SaveToFileUsingMutex(`0,System.String)">
            <summary>
                Save the current Config to file.
            </summary>
            <param name="absoluteFilePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.SaveToFileBinder(`0,System.String,System.Int32)">
            <summary>
                Save the current Config to file.
            </summary>
            <param name="model"></param>
            <param name="absoluteFilePath"></param>
            <param name="reCallSaveInMinutes"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.SaveToFileBinderUsingMutex(`0,System.String,System.Int32)">
            <summary>
                Save the current Config to file.
            </summary>
            <param name="model"></param>
            <param name="absoluteFilePath"></param>
            <param name="reCallSaveInMinutes"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.StopForceBindingForSave">
            <summary>
                Stop binder saving data.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.GetDataFromFile(System.String)">
            <summary>
                Load the current config from file.
            </summary>
            <param name="absoluteFilePath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IGenericPersistentLogic`1.GetDataFromFileUsingMutex(System.String)">
            <summary>
                Load the current config from file. Using mutex read.
            </summary>
            <param name="absoluteFilePath"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic">
            <summary>
                Generic Persistent Saving Logic
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.SaveToFile``1(``0,System.String)">
            <summary>
                Save the current Config to file.
            </summary>
            <param name="absoluteFilePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.SaveToFileUsingMutex``1(``0,System.String)">
            <summary>
                Save the current Config to file using mutex.
            </summary>
            <param name="absoluteFilePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.SaveToFileBinder``1(``0,System.String,System.Int32)">
            <summary>
                Save the current Config to file. Starts tracking of saving.
            </summary>
            <param name="model"></param>
            <param name="absoluteFilePath"></param>
            <param name="reCallSaveInMinutes"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.SaveToFileBinderUsingMutex``1(``0,System.String,System.Int32)">
            <summary>
                Save the current Config to file. Starts tracking of saving.
            </summary>
            <param name="model"></param>
            <param name="absoluteFilePath"></param>
            <param name="reCallSaveInMinutes"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.StopForceBindingForSave">
            <summary>
                Stop binder saving data.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.GetRawDataFromFile(System.String)">
            <summary>
                Get raw data from file.
            </summary>
            <param name="absoluteFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.GetRawDataFromFileUsingMutex(System.String)">
            <summary>
                Get raw data from file using mutex.
            </summary>
            <param name="absoluteFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.PersistentLogic.IStandAloneGenericPersistentLogic.GetDataFromFileUsingMutex``1(System.String)">
            <summary>
                Load the current config from file using mutex.
            </summary>
            <param name="absoluteFilePath"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.DataAdapter.IDataConverter`2.GetConvertedData(`0,System.Object[])">
            <summary>
                Generic given data will be extracted to this dictionary based on logic
            </summary>
            <param name="dataInDifferentForm"></param>
            <param name="dynamicParameters"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowerShellProcessOutputProcessor">
            <summary>
                Acts as a Event handler processor to process and handle outputs
                redirected from <see cref="!:PowershellRunnerService" /> process.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowerShellProcessOutputProcessor.HandleOutput(System.Diagnostics.Process)">
            <summary>
                Hands over external process output for farther handling
            </summary>
            <param name="runningProcess">active process instance of <see cref="T:System.Diagnostics.Process" /></param>
            <returns>Exit status code of service</returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowershellRunnerService">
            <summary>
                Runs power shell with the provided arguments
                This service is used to download projects from Github
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowershellRunnerService.RunScript(System.String,System.String)">
            <summary>
                Runs power shell script in an external process
            </summary>
            <param name="scriptFilePath">script file to execute</param>
            <param name="runtimeArguments">dynamic arguments based to the powershell script</param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowershellRunnerServiceWithProcess">
            <summary>
                Runs power shell with the provided arguments
                This service is used to download projects from Github
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowershellRunnerServiceWithProcess.StartSignedPowerShell">
            <summary>
                Run
                "Powershell.exe Set-ExecutionPolicy -ExecutionPolicy RemoteSigned"
                required to run on the machine at once.
                <see cref="!:http://bit.ly/30HZpXQ" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowershellRunnerServiceWithProcess.UnblockFileBeforeRunning(System.String)">
            <summary>
                Unblock file for internet downloaded files to be unblocked.
                <see cref="!:http://bit.ly/30HZpXQ" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ExternalApplication.IPowershellRunnerServiceWithProcess.CreateBatchCodeProcess(System.String,System.Boolean,System.Diagnostics.DataReceivedEventHandler,System.Diagnostics.DataReceivedEventHandler)">
            <summary>
                Create a batch process with the given code here.
            </summary>
            <param name="codes"></param>
            <param name="isRunAsAdmin"></param>
            <param name="outputDataReceivedEventHandler"></param>
            <param name="errorDataReceivedEventHandler"></param>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.IActionRunner">
            <summary>
                Action Runner Wrapper
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IActionRunner.RunAction">
            <summary>
                Run the captured action from constructor. And logs the error and throws the exception.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IActionRunner.RunAtOnce">
            <summary>
                Run the action only once.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IActionRunner.RunAtOnceWithLock">
            <summary>
                The action only once with lock.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IAttachEventBindForRunningAsync.AttachRecallActionEvent(System.Int32,System.Int32)">
            <summary>
                Attach new recall attach event.
            </summary>
            <param name="runAgainInSeconds"></param>
            <param name="runFor"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IAttachEventBindForRunningAsync.ForceStopAttachedEvent">
            <summary>
                Run the event before close and then stop permanently.
                Stop the attach event running immediately.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IAttachEventBindForRunningAsync.RunOnceOnSeparateThread">
            <summary>
                Run on a separate thread. Starts the thread and
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo">
            <summary>
                Caller statement info
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo.CallerFileName">
            <summary>
                Caller file name
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo.CallerLineNumber">
            <summary>
                Caller line number
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo.Type">
            <summary>
                Caller type
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo.IsFullInfo">
            <summary>
                Is going to print full or short info.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ICallerStatementInfo.GetLineInfo">
            <summary>
                Get the string line info
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.IGenericArgumentSample">
            <summary>
                An sample generic argument
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent">
            <summary>
                Instance Component, helps to access private or non public or non accessible members in the class.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.InitializeInheritedMembers">
            <summary>
                If this flag is true that means inherited members will be available and can be discovered by searching.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.AssemblyFullyQuantifiedName">
            <summary>
                Assembly fully quantified name
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentAssembly">
            <summary>
                Current Instance's Assembly.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstanceType">
            <summary>
                Current Instance type
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstance">
            <summary>
                Current Instance
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.Fixture">
            <summary>
                Fixture to create items
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.AllFieldInfos">
            <summary>
                Keeps tracks of the fields, where key is the field name.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.AllBackingFieldInfos">
            <summary>
                Backing fieldinfos <see cref="T:Auk.CsharpBootstrapper.Interfaces.IBackingFieldInfo" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.AllMethodInfos">
            <summary>
                All the method infos, where keys is the method name.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.AllPropertyInfos">
            <summary>
                All the property-info, where keys is the property name.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.IsStatic">
            <summary>
                Is static or not
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.IsAbstract">
            <summary>
                Is Abstract <see cref="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstanceType" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.IsSealed">
            <summary>
                Is Sealed <see cref="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstanceType" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.IsInstanceNull">
            <summary>
                Returns true if <see cref="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstance" /> is null.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.GetInstance``1">
            <summary>
                Get the current instance with the specific type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1">
            <summary>
                <see cref="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1" /> is a lazy functions collection for variable possibilities which may need to
                run later.
            </summary>
            <typeparam name="T">Type of <see cref="T:System.Func`1" /> we are gathering to store result for each <see cref="!:T" />.</typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.AddLazyPossibility(Auk.CsharpBootstrapper.Interfaces.ILazyGetter{`0})">
            <summary>
                Add lazy functional possibilities to a <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
            <param name="lazyGetter"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.GetPossibilities">
            <summary>
                Get the possibilities for the these lazy asserts
                Compiles the functions and populates the <see cref="T:System.Collections.Generic.HashSet`1" />..
                <para></para>
                It is only done once so please make sure to run it once all lazy possibilities are added to the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.IsContains(`0)">
            <summary>
                Does the data contains in the <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.Has(`0)">
            <summary>
                Asserts that <see cref="!:data" /> contains inside the lazy asserts.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.Has(`0,System.String)">
            <summary>
                Asserts <see cref="!:data" /> contains inside the lazy asserts.
            </summary>
            <param name="data"></param>
            <param name="messageOnFail">Throws with this message if fails</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.HasIf(System.Func{System.Boolean},`0,System.String)">
            <summary>
                Asserts only if condition is true, asserts <see cref="!:data" /> is in the collection.
            </summary>
            <param name="condition"></param>
            <param name="data"></param>
            <param name="messageOnFail">Throws with this message if fails</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.NotExist(`0)">
            <summary>
                Assert that given data doesn't contain in the lazy list.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetterCollection`1.NotExist(`0,System.String)">
            <summary>
                Assert that given data doesn't contain in the lazy list.
            </summary>
            <param name="data"></param>
            <param name="messageOnFail"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1">
            <summary>
                Lazy Getters helps to get the result in lazy fashion and only once or multiple.
                <para></para>
                Also it helps to get conditional results.
            </summary>
            <typeparam name="T">Type of result expecting to be outputed.</typeparam>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.Value">
            <summary>
                Run the logic to get the logic, if Condition given then
                <para></para>
                if condition meets then it will give the result or else
                default{T} returns.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ValueAtOnce">
            <summary>
                Run only once
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.IsOneTimeResultExecuted">
            <summary>
                returns true if <see cref="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ValueAtOnce" /> or <see cref="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ValueAtOnceWithLock" /> run at least once
                if <see cref="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ResetOneTimeValue" /> is invoked again then it will come as false.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.IsOneTimeValuePresent">
            <summary>
                Cache data for <see cref="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ValueAtOnce" /> or <see cref="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ValueAtOnceWithLock" /> is not null then returns true.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ValueAtOnceWithLock">
            <summary>
                Run only once with Lock
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.InvokeActionAtOnce">
            <summary>
                Run only once without Lock
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.InvokeActionAtOnceLock">
            <summary>
                Run only once with Lock
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ILazyGetter`1.ResetOneTimeValue">
            <summary>
                UnInitialize the one time value to be loaded again.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger">
            <summary>
                Logger for the Static Analyzer application
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.Logger">
            <summary>
                Log4Net Logger
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InitializeLog4Net(log4net.ILog)">
            <summary>
                Initialize log4net logger.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.ConfigureLog4Net(System.Reflection.Assembly,System.String,System.String)">
            <summary>
                Initialize log4net logger.
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <param name="fileNameForSetup"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.TraceInfo(System.Type,System.String,System.Int32)">
            <summary>
                Logs trace message
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.Info(System.Type,System.String,System.Int32)">
            <summary>
                Logs information message
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.Warn(System.Type,System.String,System.Int32)">
            <summary>
                Logs warning message
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.Error(System.Type,System.Exception,System.Int32)">
            <summary>
                Logs error message
            </summary>
            <param name="type"></param>
            <param name="exception"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.Error(System.Type,System.Exception,System.String,System.Int32)">
            <summary>
                Logs error message
            </summary>
            <param name="type"></param>
            <param name="exception"></param>
            <param name="message"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.Error(System.Type,System.String,System.Int32)">
            <summary>
                Logs error message
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.PathError(System.Type,System.String,System.Exception,System.String,System.Int32)">
            <summary>
                Logs error message
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="path"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoStart(System.Type,System.String,System.Int32)">
            <summary>
                Shows log with start flag.
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoWithDuration(System.Type,System.String,System.Action,System.Int32)">
            <summary>
                Display start and end with duration
                Capture exception if thrown.
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="action"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoDuration``1(System.Type,System.String,System.Action{``0},``0,System.Int32)">
            <summary>
                Logs ending info with duration.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="action"></param>
            <param name="param1"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoDuration``2(System.Type,System.String,System.Action{``0,``1},``0,``1,System.Int32)">
            <summary>
                Logs ending info with duration.
            </summary>
            <param name="type"></param>
            <param name="action"></param>
            <param name="methodName"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoDuration``2(System.Type,System.String,System.Action,System.Int32)">
            <summary>
                Logs ending info with duration.
            </summary>
            <param name="type"></param>
            <param name="action"></param>
            <param name="methodName"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoEnd(System.Type,System.String,System.TimeSpan,System.Int32)">
            <summary>
                Logs ending info with duration.
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="timeSpan"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.InfoEnd(System.Type,System.String,System.DateTime,System.Int32)">
            <summary>
                Logs ending info with duration.
            </summary>
            <param name="type"></param>
            <param name="message"></param>
            <param name="startTimeAt"></param>
            <param name="line"></param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.DumpListDataToLog(System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
                Dump list of data to log and console.
            </summary>
            <param name="list"></param>
            <param name="isPrintingError">Prints message to error console.</param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.Logger.IConsoleLogger.TraceLogCopyToClipboard(System.Type,System.Exception,System.String,System.Int32)">
            <summary>
                Copies exception logging information to clipboard
            </summary>
            <param name="currentType"></param>
            <param name="exception"></param>
            <param name="additionalInformation"></param>
            <param name="callerLineNumber"></param>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.Model.IGenericModel">
            <summary>
                Any model
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.ICommonValidateResult`1">
            <summary>
                Common Validate Result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1">
            <summary>
                Any method result wrapper, act as lazy.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1.ValueResult">
            <summary>
                Get the result of the method by invoking it. Lazy result expected.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1.WorkingAction">
            <summary>
                Action which will generate the result.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1.Parameters">
            <summary>
                Available parameters in the <see cref="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1.MethodInfo" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1.InstanceOfClass">
            <summary>
                Instance of the Class from <see cref="P:Auk.CsharpBootstrapper.Interfaces.IInstanceComponent.CurrentInstance" />
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ResultWrapper.IResultModelWrapper`1.InstanceComponent">
            <summary>
                Instance component helps to tap into private or non accessible items in the class.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler">
            <summary>
                Process error and standard error receiver.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.StandardDataReceiver">
            <summary>
                Standard data receiver handler.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.ErrorDataReceiver">
            <summary>
                Error data receiver handler.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.StartMessageDumping">
            <summary>
                Start Message dumping for <see cref="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.StandardDataReceiver" /> and <see cref="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.ErrorDataReceiver" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.ForceStopMessageDumping">
            <summary>
                Force stop Message dumping for <see cref="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.StandardDataReceiver" /> and <see cref="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessBothDataReceiveEventHandler.ErrorDataReceiver" />
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler">
            <summary>
                <see cref="T:System.Diagnostics.Process" /> <see cref="T:System.Diagnostics.DataReceivedEventHandler" /> default data receive handler.
                One handler can only work once per process. New one needed to be created if again new process is tapped.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.ProcessInfoModel">
            <summary>
                Process info details
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.IsErrorHandler">
            <summary>
                Based on this flag message will be either generated as Info or Fatal.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.IsPrintProcessInfoOnEveryMessage">
            <summary>
                Based on this flag either the header for the process will be printed every time
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.StringLengthMustBeGreaterThanForPrintingMessage">
            <summary>
                Based on the number if first delay doesn't have this much of character then it will wait for the next section.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.IsMessageDumpEnabled">
            <summary>
                If true then message will be dump to using logger
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.IsPrintInfoInXmlFormat">
            <summary>
                If true then print messages in xml format.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.CallerStatementInfo">
            <summary>
                Caller info for this receiver
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.StartMessageDumpingUsingThread">
            <summary>
                Start message dumping and force close.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.ForceStopMessageDumpingUsingThread">
            <summary>
                Stop message dumping and force close.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessDataReceiveEventHandler.GetDefaultHandler">
            <summary>
                Returns default data received handler. Which collects string data into list if data is not empty or has Characters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessInfoModel">
            <summary>
                Parent Process Info
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessInfoModel.Id">
            <summary>
                Process Id
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Interfaces.ProcessEventInfo.IProcessInfoModel.ProcessName">
            <summary>
                Parent Process Name
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder">
            <summary>
                Interface which allow to preform progressService operations
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.SetMaximumProgress(System.Int32)">
            <summary>
                Set maximum points of the progressService bar.
            </summary>
            <param name="points">
                The number of points to set.
            </param>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.SetMarqueeUnknownProgress">
            <summary>
                ProgressService bar continuous and show unknown progress
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.SetContinuousKnownProgress">
            <summary>
                ProgressService bar Marquee and show known progress
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.PerformStep">
            <summary>
                Preform default step for progressService bar.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.SetValue(System.Int32)">
            <summary>
                Set progress-or value
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.Reset">
            <summary>
                Reset progressService bar to default state.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.SetProgressToFull">
            <summary>
                Show the full progressService bar ends.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IProgressComponentBinder.SetToZero">
            <summary>
                Set the progressbar to
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.UserInterface.IRichTextLogWriter.Clear">
            <summary>
                Clear <see cref="T:System.Windows.Forms.RichTextBox" /> and also
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.CommonProperties.ICommonCacheProperties.HasKey(System.String)">
            <summary>
            Returns true if the key exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.CommonProperties.ICommonCacheProperties.Get``1(System.String)">
            <summary>
                Safe get the dictionary value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.CommonProperties.ICommonCacheProperties.Set(System.String,System.Object)">
            <summary>
                Safe get the dictionary value.
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Interfaces.CommonProperties.ICommonCacheProperties.GetDynamic(System.String,System.Object)">
            <summary>
                Safe get the dictionary value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.EnumRangeModel.Min">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.EnumRangeModel.Max">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.GenericArgumentSampleModel.CharType">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.IsOpenToInjectGenericArgument">
            <summary>
                True means generic arguments are empty and can be applied.
            </summary>
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.IsGenericParametersOpenToApply">
            <summary>
                <see cref="P:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.HasGenericArgument" /> and <see cref="P:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.IsOpenToInjectGenericArgument" />
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Model.MethodInfoWrapperModel.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Auk.CsharpBootstrapper.Model.ParallelProcessSequenceInfoModel">
            <summary>
                This model deals or have information of the a given number which parts it should be divided.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.Model.ParallelProcessSequenceInfoModel.ToString">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.ParameterConstraintModel.Index">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.ParameterConstraintModel.ParameterName">
            <inheritdoc />
        </member>
        <member name="P:Auk.CsharpBootstrapper.Model.ParameterConstraintModel.ParameterType">
            <inheritdoc />
        </member>
        <member name="M:Auk.CsharpBootstrapper.Model.ParameterConstraintModel.ToString">
            <inheritdoc />
        </member>
        <member name="T:Auk.CsharpBootstrapper.StaticCache.CommonCache">
            <summary>
                Simple cache to handle data in the dictionary.
            </summary>
        </member>
        <member name="M:Auk.CsharpBootstrapper.StaticCache.CommonCache.GetDynamic(System.String,System.Type@,System.Object)">
            <summary>
                Returns dynamic result without casting.
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.StaticCache.CommonCache.GetStateChanges``1(System.String)">
            <summary>
                Get all the changed values for the current key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Auk.CsharpBootstrapper.StaticCache.CommonCache.Set``1(System.String,``0)">
            <summary>
                Set a value in the dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Auk.CsharpBootstrapper.StaticCache.CommonCache.ToStringStates">
            <summary>
                ToString of all the values.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.PackageInstance.FixtureGetter">
            <summary>
                Returns a lazy getter for fixture create.
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier">
            <summary>
                Common Constants
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.StartInfoText">
            <summary>
                " [ Started ] Task : "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EndInfoText">
            <summary>
                " [ Ended ] Task : "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SpaceColonSpace">
            <summary>
                " : "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.InsightInfoText">
            <summary>
                " [ Insight ] "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.InnerInsightInfoText">
            <summary>
                " - [ Insight ] "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DotFakesKeyword">
            <summary>
                ".Fakes"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LoggerNewLine">
            <summary>
                $"\n{CommonIdentifiers.EightSpaces}"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ErrorHeader">
            <summary>
                $"\n{CommonIdentifiers.EightSpaces}"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Hyphen">
            <summary>
                "-"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EncapsulateDoubleQuoteString">
            <summary>
                "\\\""
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NewLineSlashRN">
            <summary>
                "\r\n"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CarriageReturn">
            <summary>
                "\r" - CarriageReturn
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestAroundWithSquaredBrackets">
            <summary>
                "[Test]"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ConstructorTestsEndsWith">
            <summary>
                "_Is_Instance_Present_Test"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleWhitespace">
            <summary>
                "  "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SingleWhitespace">
            <summary>
                " "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleQuoteString">
            <summary>
                "\""
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleQuoteChar">
            <summary>
                '"'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestConstString">
            <summary>
                "Test"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.FalseKeyword">
            <summary>
                "false"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TrueKeyword">
            <summary>
                "true"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CodeJoinerSingleLine">
            <summary>
                "\n" - CarriageReturn
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RegionStarts">
            <summary>
                "#region"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RegionEnds">
            <summary>
                "#endregion"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CsharpProjectGuidFormat">
            <summary>
                "B"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.PartialClassKeywordConstant">
            <summary>
                "partial class "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CodeJoinerDoubleLine">
            <summary>
                "\n\n"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ConstructorKeyword">
            <summary>
                "Constructor"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ClassInstanceNameForLambdaAction">
            <summary>
                "classInstance"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CurrentInstanceCreateInvocation">
            <summary>
                "CreateCurrentInstance()" without semicolon
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.FourSpaces">
            <summary>
                "    " four spaces
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EightSpaces">
            <summary>
                "        " eight spaces
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Void">
            <summary>
                "void"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.StringCapital">
            <summary>
                "String"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.StringLower">
            <summary>
                "string"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.PipeSeparator">
            <summary>
                "|"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.PipeSeparatorChar">
            <summary>
                '|'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ShouldlySatisfyAll">
            <summary>
                "this.ShouldSatisfyAllConditions("
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.AllInstanceSymbol">
            <summary>
                "AllInstances"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.GetSymbol">
            <summary>
                "Get"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.HashSymbol">
            <summary>
                "#"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftParenthesis">
            <summary>
                "("
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftParenthesisChar">
            <summary>
                "("
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightParenthesis">
            <summary>
                ")"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightParenthesisChar">
            <summary>
                ")"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SemiColon">
            <summary>
                ":"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CommaAndNewLine">
            <summary>
                ",\n"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CommaSpace">
            <summary>
                ", "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Comma">
            <summary>
                ","
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.As">
            <summary>
                "as"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CommaAndNewLineFourSpaces">
            <summary>
                ",\n{FourSpaces}"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleUnderscore">
            <summary>
                "__"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftCurlyBrace">
            <summary>
                "{"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftCurlyBraceChar">
            <summary>
                "{"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.AndKeywordForSQL">
            <summary>
                "AND"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Pipe">
            <summary>
                "|"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Is">
            <summary>
                "is"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoublePipe">
            <summary>
                "||"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoublePipeDunder">
            <summary>
                "_||_"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ORKeywordForSQL">
            <summary>
                "OR"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.AndSpaceKeywordForSQL">
            <summary>
                " AND "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ORSpaceKeywordForSQL">
            <summary>
                " OR "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.GetMethodStart">
            <summary>
                get_
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SetMethodStart">
            <summary>
                set_
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftAngleBracket">
            <summary>
                less than
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftAngleBracketChar">
            <summary>
                less than
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightAngleBracket">
            <summary>
                greater than
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightAngleBracketChar">
            <summary>
                greater than
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.UsingSystemPrefix">
            <summary>
                "using System"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.UsingSpacePrefix">
            <summary>
                "using "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.UsingStaticSpace">
            <summary>
                "using static "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.UsingSystemAliasSubStringWithoutSpaces">
            <summary>
                "=System."
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.MinusOne">
            <summary>
                -1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightCurlyBrace">
            <summary>
                "}"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightCurlyBraceChar">
            <summary>
                "}"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ProjectGuidFormat">
            <summary>
                "B"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Unknown">
            <summary>
                "Unknown"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Equal">
            <summary>
                "="
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.WildcardStar">
            <summary>
                "*"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.WildcardStarChar">
            <summary>
                "*"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TemplateDelimiter">
            <summary>
                "$"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TemplateAlternateDelimiter">
            <summary>
                "%"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.PackagesConfigFileName">
            <summary>
                "packages.config"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.AppConfigFileName">
            <summary>
                "app.config"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BuildItemTypeCompile">
            <summary>
                "Compile"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BuildItemTypeReference">
            <summary>
                "Reference"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BuildItemTypeProjectReference">
            <summary>
                "ProjectReference"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BuildItemTypeComReference">
            <summary>
                "COMReference"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ErrorMessageValueNullOrWhitespace">
            <summary>
                "Value cannot be null or white space."
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SolutionFileGuidFormat">
            <summary>
                "B"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NugetPackagesBasePathPlaceholder">
            <summary>
                "%NugetPackagesBasePath%"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Space">
            <summary>
                " "
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SpaceChar">
            <summary>
                ' '
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NewLineSlashN">
            <summary>
                "\n"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NewLineSlashR">
            <summary>
                "\r"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NewLineSlashRChar">
            <summary>
                '\r'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Megabyte">
            <summary>
                1_048_576
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EmptyStringArray">
            <summary>
                new string[0]
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EmptyListString" -->
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.PossibleNumberTypes" -->
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LongPathPrefix">
            <summary>
                @"\\?\"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LineSeparators">
            <summary>
                [<see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NewLineSlashRChar" /> , <see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NewLineSlashNChar" />]
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BraceBrackets">
            <summary>
                [<see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftCurlyBrace" /> , <see cref="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightCurlyBrace" />]
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BoolTrueLower">
            <summary>
                "true"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BoolFalseLower">
            <summary>
                "false"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.VoidCapital">
            <summary>
                "Void"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Bool">
            <summary>
                "bool"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Boolean">
            <summary>
                "Boolean"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Int">
            <summary>
                "int"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Decimal">
            <summary>
                "decimal"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Double">
            <summary>
                "double"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Int32">
            <summary>
                "Int32"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Int64">
            <summary>
                "Int64"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Long">
            <summary>
                "long"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Null">
            <summary>
                "null"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Static">
            <summary>
                "static" lower-case
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.String">
            <summary>
                "string" lower-case
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DateTime">
            <summary>
                "DateTime"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.List">
            <summary>
                "List"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Collection">
            <summary>
                "Collection"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TruePascalCase">
            <summary>
                "True" PascalCase
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.FalsePascalCase">
            <summary>
                "False" PascalCase
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.IListKeyword">
            <summary>
                "IList"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Ienumerable">
            <summary>
                "IEnumerable"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LinkedList">
            <summary>
                "LinkedList"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SortedSet">
            <summary>
                "SortedSet"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Underscore">
            <summary>
                "_"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.UnderscoreChar">
            <summary>
                "_"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Dot">
            <summary>
                "."
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.This">
            <summary>
                "this"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ThisDot">
            <summary>
                "this."
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DotChar">
            <summary>
                "."
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CommaChar">
            <summary>
                ','
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.QuestionMark">
            <summary>
                "?"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleQuotationTogether">
            <summary>
                "\"\""
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Default">
            <summary>
                "default"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SemiColonChar">
            <summary>
                ";"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NullDefined">
            <summary>
                null value as string
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Dynamic">
            <summary>
                "dynamic"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Function">
            <summary>
                function descriptor to catch function parameter
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CommonGenericParameter">
            <summary>
                "GenericArgumentSample"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TypeOf">
            <summary>
                "typeof"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TypeOfDynamic">
            <summary>
                "typeof(dynamic)"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NullDefinedWithSemicolon">
            <summary>
                "typeof(dynamic)"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleSlash">
            <summary>
                "\\\\"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SlashSymbol">
            <summary>
                "\\"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.HashChar">
            <summary>
                '#'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Hash">
            <summary>
                "#"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ExistingProjectName">
            <summary>
                "ExistingProjectName"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ExistingNamespace">
            <summary>
                "ExistingNamespace"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.AssemblyInfoDelimiterStart">
            <summary>
                "AssemblyInfoDelimiterStart"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.AssemblyInfoDelimiterEnd">
            <summary>
                "AssemblyInfoDelimiterEnd"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SystemNamespace">
            <summary>
                "SystemNamespace"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SystemComponentModel">
            <summary>
                "SystemComponentModel"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Namespace">
            <summary>
                "namespace"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CreateTypeStart" -->
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CreateTypeEnd">
            <summary>
                ">()"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestConstant">
            <summary>
                "Test"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ConsoleTestNameLineSplitter">
            <summary>
                "   " 3 spaces
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ConsoleTestNameLineSplitterForSkipping">
            <summary>
                "  " 2 spaces
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestPassedConst">
            <summary>
                "Passed"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestSkippedConst">
            <summary>
                "Skipped"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestFailedConst">
            <summary>
                "Failed"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.UnderscoreStatic">
            <summary>
                "_Static"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TestSkippedNotExecutedConst">
            <summary>
                "NotExecuted"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.QuestionMarkSymbol">
            <summary>
                "?"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.CodeDotChar">
            <summary>
                "."
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.OperatorsList">
            <summary>
                { OperatorEquals, OperatorNotEquals, OperatorGreaterthan, OperatorGreaterthanEquals, OperatorLessthan,
                OperatorLessthanEquals }
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TypeFilterList" -->
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DefaultDegreeOfParallelism">
            <summary>
                Default DegreeOfParallelism = 30
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EqualChar">
            <summary>
                '='
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.NotEqual">
            <summary>
                "!" Exclamanation
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.GreaterThanEqual">
            <summary>
                ">="
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LessThanEqual" -->
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LessThan" -->
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.GreaterThan">
            <summary>
                ">"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.TypeKeyword">
            <summary>
                "Type"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.FixtureKeyword">
            <summary>
                "Fixture"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.HyphenArrow">
            <summary>
                "->"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BackSlash">
            <summary>
                "\\"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ForwardSlash">
            <summary>
                "/"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ForwardSlashChar">
            <summary>
                '/'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleForwardSlash">
            <summary>
                "//"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleBackSlash">
            <summary>
                "\\\\"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ClassIdentifier">
            <summary>
                "class"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.GlobalNamespace">
            <summary>
                "Global"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.ColonChar">
            <summary>
                ':'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Colon">
            <summary>
                ':'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.SingleQuote">
            <summary>
                "'"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.DoubleQuote">
            <summary>
                "\""
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftSquareBracket">
            <summary>
                "["
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.LeftSquareBracketChar">
            <summary>
                "["
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightSquareBracket">
            <summary>
                "]"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.RightSquareBracketChar">
            <summary>
                "]"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BracketsDictionary">
            <summary>
                Collection of Brackets
                [LeftParenthesis]   = RightParenthesis,
                [LeftCurlyBrace]    = RightCurlyBrace,
                [LeftSquareBracket] = RightSquareBracket,
                [LeftAngleBracket]  = RightAngleBracket
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.BracketsCharacterDictionary">
            <summary>
                Collection of Brackets
                [LeftParenthesisChar]   = RightParenthesisChar,
                [LeftCurlyBraceChar]    = RightCurlyBraceChar,
                [LeftSquareBracketChar] = RightSquareBracketChar,
                [LeftAngleBracketChar]  = RightAngleBracketChar
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.HyphenChar">
            <summary>
                "-"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.Object">
            <summary>
                "object"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonIdentifier.EmptyString">
            <summary>
                "" or string.Empty
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.DateTimeFormatType.CommonDateTimeTwelveHourFormat">
            <summary>
                "yyyy-MMM-dd hh:mm:ss t" = "2019-Jan-19 01:20:56 pm"
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.StaticTypes.ExtensionType">
            <summary>
                Extension types
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.DllExtensionFilter">
            <summary>
                "*.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CsProjExtensionFilter">
            <summary>
                "*.csproj"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.JsonExtension">
            <summary>
                ".json"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.AllWithAsteriskExtension">
            <summary>
                "*.*"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.DllExtension">
            <summary>
                ".dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CsharpExtension">
            <summary>
                ".cs"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.ExeExtension">
            <summary>
                ".exe"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.PngExtension">
            <summary>
                ".png"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.BmpExtension">
            <summary>
                ".bmp"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.JpgExtension">
            <summary>
                ".jpg"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.IcoExtension">
            <summary>
                ".ico"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.TxtExtension">
            <summary>
                ".txt"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.SqlExtension">
            <summary>
                ".sql"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.MdExtension">
            <summary>
                ".md"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.JsExtension">
            <summary>
                ".js"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.Mp3Extension">
            <summary>
                ".mp3"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.AviExtension">
            <summary>
                ".avi"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.MpegExtension">
            <summary>
                ".mp3"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.PdfExtension">
            <summary>
                ".pdf"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.MpgExtension">
            <summary>
                ".mpg"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.DllWithAsteriskExtension">
            <summary>
                "*.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.ExeWithAsteriskExtension">
            <summary>
                "*.exe"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CommonAssembliesSkippingExtensions">
            <summary>
                TestAssemblyExtension = "Test.dll",
                TestsAssemblyExtension = "Tests.dll",
                FakesAssemblyExtension = ".Fakes.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CommonAssembliesExtensions">
            <summary>
                DllExtension = ".dll",
                ExeExtension = ".exe",
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.TestAssemblyExtension">
            <summary>
                "Test.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.TestsAssemblyExtension">
            <summary>
                "Tests.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.FakesAssemblyExtension">
            <summary>
                ".Fakes.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CsprojWithAsteriskExtension">
            <summary>
                "*.csproj"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CsharpWithAsteriskExtension">
            <summary>
                "*.cs"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.CsProjExtension">
            <summary>
                ".csproj"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.DotFakesExtension">
            <summary>
                ".fakes"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.DotFakesDotDllExtension">
            <summary>
                ".fakes.dll"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.TestFileExtension">
            <summary>
                "Test.cs"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.SolutionExtension">
            <summary>
                ".sln"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ExtensionType.SolutionAsteriskExtension">
            <summary>
                "*.sln"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.PublicNonPublicFlattenHierarchyFlag">
            <summary>
                Represents sort of constants, however, not fully , requires a extract step of filtering (fi lamda fi.IsLiteral and
                !fi.IsInitOnly)
                !fi.IsInitOnly)
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.NonPublicFlattenHierarchyFlag">
            <summary>
                Represents sort of constants, however, not fully , requires a extract step of filtering (fi lamda fi.IsLiteral and
                !fi.IsInitOnly)
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.AllMembersExceptForInheritingMembersFlag">
            <summary>
                All members will be visible except for the base class members.
                Flags used <see cref="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.PublicNonPublicStaticInstanceFlag" /> |
                <see cref="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.DeclaredNonInheritingMember" />;
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.AllMembersFlag">
            <summary>
                All members will be visible except for the base class members.
                Flags used <see cref="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.PublicNonPublicStaticInstanceFlag" /> |
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.ReflectionConstants.PublicNonPublicStaticInstanceFlag">
            <summary>
                Refers to <see cref="F:System.Reflection.BindingFlags.NonPublic" /> | <see cref="F:System.Reflection.BindingFlags.Public" /> |
                <see cref="F:System.Reflection.BindingFlags.Static" /> | <see cref="F:System.Reflection.BindingFlags.Instance" />
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.StaticTypes.StringFormatType">
            <summary>
                Stores ToString methods' format types
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.StringFormatType.GuidWithoutDashes">
            <summary>
                Guid without dashes
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.StringFormatType.DateTimeHourMinuteDayFormat">
            <summary>
                DateTime format of hour-minute-day-month-year
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.CompilationUnitSyntax">
            <summary>
                CompilationUnitSyntax = "CompilationUnitSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.NamespaceDeclarationSyntax">
            <summary>
                NamespaceDeclarationSyntax = "NamespaceDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.IdentifierNameSyntax">
            <summary>
                IdentifierNameSyntax = "IdentifierNameSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.StructDeclarationSyntax">
            <summary>
                StructDeclarationSyntax = "StructDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.EnumDeclarationSyntax">
            <summary>
                EnumDeclarationSyntax = "EnumDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.IdentifierToken">
            <summary>
                "IdentifierToken"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ClassDeclarationSyntax">
            <summary>
                ClassDeclarationSyntax = "ClassDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AsKeyword">
            <summary>
                "AsKeyword"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.FieldDeclarationSyntax">
            <summary>
                FieldDeclarationSyntax = "FieldDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.VariableDeclarationSyntax">
            <summary>
                VariableDeclarationSyntax = "VariableDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.PredefinedTypeSyntax">
            <summary>
                PredefinedTypeSyntax = "PredefinedTypeSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.VariableDeclaratorSyntax">
            <summary>
                VariableDeclaratorSyntax = "VariableDeclaratorSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.EqualsValueClauseSyntax">
            <summary>
                EqualsValueClauseSyntax = "EqualsValueClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.LiteralExpressionSyntax">
            <summary>
                LiteralExpressionSyntax = "LiteralExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.UsingDirectiveSyntax">
            <summary>
                UsingDirectiveSyntax = "UsingDirectiveSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.QualifiedNameSyntax">
            <summary>
                QualifiedNameSyntax = "QualifiedNameSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AttributeListSyntax">
            <summary>
                AttributeListSyntax = "AttributeListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AttributeSyntax">
            <summary>
                AttributeSyntax = "AttributeSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.MethodDeclarationSyntax">
            <summary>
                Function = "Function"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.NumericLiteralToken">
            <summary>
                "NumericLiteralToken"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.StringLiteralToken">
            <summary>
                "StringLiteralToken"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ParameterListSyntax">
            <summary>
                ParameterListSyntax = "ParameterListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ParameterSyntax">
            <summary>
                ParameterSyntax = "ParameterSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.BlockSyntax">
            <summary>
                BlockSyntax = "BlockSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ReturnStatementSyntax">
            <summary>
                ReturnStatementSyntax = "ReturnStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InvocationExpressionSyntax">
            <summary>
                InvocationExpressionSyntax = "InvocationExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.MemberAccessExpressionSyntax">
            <summary>
                MemberAccessExpressionSyntax = "MemberAccessExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ArgumentListSyntax">
            <summary>
                ArgumentListSyntax = "ArgumentListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ArgumentSyntax">
            <summary>
                ArgumentSyntax = "ArgumentSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.GenericNameSyntax">
            <summary>
                GenericNameSyntax = "GenericNameSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.TypeArgumentListSyntax">
            <summary>
                TypeArgumentListSyntax = "TypeArgumentListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.IfStatementSyntax">
            <summary>
                IfStatementSyntax = "IfStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.PrefixUnaryExpressionSyntax">
            <summary>
                PrefixUnaryExpressionSyntax = "PrefixUnaryExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ElseClauseSyntax">
            <summary>
                ElseClauseSyntax = "ElseClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.BinaryExpressionSyntax">
            <summary>
                BinaryExpressionSyntax = "BinaryExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.LocalDeclarationStatementSyntax">
            <summary>
                LocalDeclarationStatementSyntax = "LocalDeclarationStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.UsingStatementSyntax">
            <summary>
                UsingStatementSyntax = "UsingStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ObjectCreationExpressionSyntax">
            <summary>
                ObjectCreationExpressionSyntax = "ObjectCreationExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ExpressionStatementSyntax">
            <summary>
                ExpressionStatementSyntax = "ExpressionStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AssignmentExpressionSyntax">
            <summary>
                AssignmentExpressionSyntax = "AssignmentExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.CastExpressionSyntax">
            <summary>
                CastExpressionSyntax = "CastExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.SimpleLambdaExpressionSyntax">
            <summary>
                SimpleLambdaExpressionSyntax = "SimpleLambdaExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ThrowStatementSyntax">
            <summary>
                ThrowStatementSyntax = "ThrowStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ForEachStatementSyntax">
            <summary>
                ForEachStatementSyntax = "ForEachStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.SwitchStatementSyntax">
            <summary>
                SwitchStatementSyntax = "SwitchStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.SwitchSectionSyntax">
            <summary>
                SwitchSectionSyntax = "SwitchSectionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.CaseSwitchLabelSyntax">
            <summary>
                CaseSwitchLabelSyntax = "CaseSwitchLabelSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.BreakStatementSyntax">
            <summary>
                BreakStatementSyntax = "BreakStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.DefaultSwitchLabelSyntax">
            <summary>
                DefaultSwitchLabelSyntax = "DefaultSwitchLabelSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.TryStatementSyntax">
            <summary>
                TryStatementSyntax = "TryStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.CatchClauseSyntax">
            <summary>
                CatchClauseSyntax = "CatchClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.CatchDeclarationSyntax">
            <summary>
                CatchDeclarationSyntax = "CatchDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.QueryExpressionSyntax">
            <summary>
                QueryExpressionSyntax = "QueryExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.FromClauseSyntax">
            <summary>
                FromClauseSyntax = "FromClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.QueryBodySyntax">
            <summary>
                QueryBodySyntax = "QueryBodySyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.JoinClauseSyntax">
            <summary>
                JoinClauseSyntax = "JoinClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.SelectClauseSyntax">
            <summary>
                SelectClauseSyntax = "SelectClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AnonymousObjectCreationExpressionSyntax">
            <summary>
                AnonymousObjectCreationExpressionSyntax = "AnonymousObjectCreationExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AnonymousObjectMemberDeclaratorSyntax">
            <summary>
                AnonymousObjectMemberDeclaratorSyntax = "AnonymousObjectMemberDeclaratorSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.WhereClauseSyntax">
            <summary>
                WhereClauseSyntax = "WhereClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InitializerExpressionSyntax">
            <summary>
                InitializerExpressionSyntax = "InitializerExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.NameEqualsSyntax">
            <summary>
                NameEqualsSyntax = "NameEqualsSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.NullableTypeSyntax">
            <summary>
                NullableTypeSyntax = "NullableTypeSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.BaseListSyntax">
            <summary>
                BaseListSyntax = "BaseListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.SimpleBaseTypeSyntax">
            <summary>
                SimpleBaseTypeSyntax = "SimpleBaseTypeSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ParenthesizedExpressionSyntax">
            <summary>
                ParenthesizedExpressionSyntax = "ParenthesizedExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InterfaceDeclarationSyntax">
            <summary>
                InterfaceDeclarationSyntax = "InterfaceDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.GroupClauseSyntax">
            <summary>
                GroupClauseSyntax = "GroupClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.QueryContinuationSyntax">
            <summary>
                QueryContinuationSyntax = "QueryContinuationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.OrderByClauseSyntax">
            <summary>
                OrderByClauseSyntax = "OrderByClauseSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.OrderingSyntax">
            <summary>
                OrderingSyntax = "OrderingSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ElementAccessExpressionSyntax">
            <summary>
                ElementAccessExpressionSyntax = "ElementAccessExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.BracketedArgumentListSyntax">
            <summary>
                BracketedArgumentListSyntax = "BracketedArgumentListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.WhileStatementSyntax">
            <summary>
                WhileStatementSyntax = "WhileStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ForStatementSyntax">
            <summary>
                ForStatementSyntax = "ForStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.PostfixUnaryExpressionSyntax">
            <summary>
                PostfixUnaryExpressionSyntax = "PostfixUnaryExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ConditionalExpressionSyntax">
            <summary>
                ConditionalExpressionSyntax = "ConditionalExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.TypeOfExpressionSyntax">
            <summary>
                TypeOfExpressionSyntax = "TypeOfExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.TypeParameterListSyntax">
            <summary>
                TypeParameterListSyntax = "TypeParameterListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.TypeParameterSyntax">
            <summary>
                TypeParameterSyntax = "TypeParameterSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ArrayTypeSyntax">
            <summary>
                ArrayTypeSyntax = "ArrayTypeSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ArrayRankSpecifierSyntax">
            <summary>
                ArrayRankSpecifierSyntax = "ArrayRankSpecifierSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.OmittedArraySizeExpressionSyntax">
            <summary>
                OmittedArraySizeExpressionSyntax = "OmittedArraySizeExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ContinueStatementSyntax">
            <summary>
                ContinueStatementSyntax = "ContinueStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ConstructorDeclarationSyntax">
            <summary>
                ConstructorDeclarationSyntax = "ConstructorDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.PropertyDeclarationSyntax">
            <summary>
                PropertyDeclarationSyntax = "PropertyDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AccessorListSyntax">
            <summary>
                AccessorListSyntax = "AccessorListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AccessorDeclarationSyntax">
            <summary>
                AccessorDeclarationSyntax = "AccessorDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ThisExpressionSyntax">
            <summary>
                ThisExpressionSyntax = "ThisExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.BaseExpressionSyntax">
            <summary>
                BaseExpressionSyntax = "BaseExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.OmittedTypeArgumentSyntax">
            <summary>
                OmittedTypeArgumentSyntax = "OmittedTypeArgumentSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.EmptyStatementSyntax">
            <summary>
                EmptyStatementSyntax = "EmptyStatementSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ParenthesizedLambdaExpressionSyntax">
            <summary>
                ParenthesizedLambdaExpressionSyntax = "ParenthesizedLambdaExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.ArrayCreationExpressionSyntax">
            <summary>
                ArrayCreationExpressionSyntax = "ArrayCreationExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InterpolatedStringExpressionSyntax">
            <summary>
                InterpolatedStringExpressionSyntax = "InterpolatedStringExpressionSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InterpolationSyntax">
            <summary>
                InterpolationSyntax = "InterpolationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InterpolatedStringTextSyntax">
            <summary>
                InterpolatedStringTextSyntax = "InterpolatedStringTextSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.EventFieldDeclarationSyntax">
            <summary>
                EventFieldDeclarationSyntax = "EventFieldDeclarationSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AttributeTargetSpecifierSyntax">
            <summary>
                AttributeTargetSpecifierSyntax = "AttributeTargetSpecifierSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AttributeArgumentListSyntax">
            <summary>
                AttributeArgumentListSyntax = "AttributeArgumentListSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.AttributeArgumentSyntax">
            <summary>
                AttributeArgumentSyntax = "AttributeArgumentSyntax"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.SyntaxNodeType.InvocationExpression">
            <summary>
                InvocationExpression
            </summary>
        </member>
        <member name="T:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue">
            <summary>
                Common Default values collection
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeHalfOfOneSecondToMilliseconds">
            <summary>
                500
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeOneSecondToMilliseconds">
            <summary>
                1000
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeTwoSecondToMilliseconds">
            <summary>
                2000
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeThreeSecondToMilliseconds">
            <summary>
                3000
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeFourSecondToMilliseconds">
            <summary>
                4000
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeFiveSecondToMilliseconds">
            <summary>
                5000
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeSixSecondToMilliseconds">
            <summary>
                6000
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeSevenSecondToMilliseconds">
            <summary>
                7000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeEightSecondToMilliseconds">
            <summary>
                8000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeTenSecondToMilliseconds">
            <summary>
                10000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeTwentySecondToMilliseconds">
            <summary>
                20000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeThirtySecondToMilliseconds">
            <summary>
                30000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeFortySecondToMilliseconds">
            <summary>
                40000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeFiftySecondToMilliseconds">
            <summary>
                50000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeSixtySecondToMilliseconds">
            <summary>
                60000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.TimeSeventySecondToMilliseconds">
            <summary>
                70000 milliSecondToMilliseconds
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBoolTrue">
            <summary>
                true
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBoolFalse">
            <summary>
                false
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultChar">
            <summary>
                'a'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultIntZero">
            <summary>
                0
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultLong">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultInt">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultDecimal">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultDouble">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultShort">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultFloat">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultByte">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultSByte">
            <summary>
                1
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultConstructorInfo">
            <summary>
                Get first constructor of string type.
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultAssembly">
            <summary>
                Default Assembly
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultType">
            <summary>
                Type of String, as Default Type
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultMethodInfo">
            <summary>
                ToString MethodInfo
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultMethodBase">
            <summary>
                Default Method Base
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultIntPtr">
            <summary>
                0
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultUIntPtr">
            <summary>
                0
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultString">
            <summary>
                "DefaultString"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultGuidString">
            <summary>
                "f1905fa4-1f97-4726-b2ab-cc4e43defc29"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultGuid">
            <summary>
                Guid of "f1905fa4-1f97-4726-b2ab-cc4e43defc29"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultLanguageCode">
            <summary>
                "ENG"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.NullChar">
            <summary>
                '\0'
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultCulture">
            <summary>
                "en-US"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultXml">
            <summary>
                "xml"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultCultureText">
            <summary>
                "culture"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.EmptyGuidString">
            <summary>
                "00000000-0000-0000-0000-000000000000"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.EmptyGuid">
            <summary>
                Guid of "00000000-0000-0000-0000-000000000000"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.ReferencedBoolean" -->
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.ReferencedString" -->
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.SystemThreadingType">
            <summary>
                "System.Threading"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.MaxValueProperty">
            <summary>
                "MaxValue"
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBoolArray">
            <summary>
                new bool[1] { DefaultBoolTrue }
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBoolList" -->
        <!-- Badly formed XML comment ignored for member "F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBoolLinkedList" -->
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.CharArray">
            <summary>
                new char[1] { DefaultChar }
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultFloatNullArray">
            <summary>
                new float[1]
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultFloatArray">
            <summary>
                new float[1] { 1 }
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultIntNullArray">
            <summary>
                new int[1]
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultIntArray">
            <summary>
                new int[1] { 1 }
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBytes16">
            <summary>
                All ones new byte[16] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultSBytes16">
            <summary>
                All ones
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultBytes32">
            <summary>
                All ones
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultDateTime">
            <summary>
                new DateTime(2001, 1, 1)
            </summary>
        </member>
        <member name="F:Auk.CsharpBootstrapper.StaticTypes.CommonDefaultValue.DefaultDateTimeArray">
            <summary>
                new DateTime[1] { new DateTime(2001, 1, 1) }
            </summary>
        </member>
    </members>
</doc>
